[{"/home/ashish/pdfdoc/research-ranking-app/my-app/src/index.js":"1","/home/ashish/pdfdoc/research-ranking-app/my-app/src/App.js":"2","/home/ashish/pdfdoc/research-ranking-app/my-app/src/reportWebVitals.js":"3","/home/ashish/pdfdoc/research-ranking-app/my-app/src/HtmlViewer.js":"4","/home/ashish/pdfdoc/research-ranking-app/my-app/src/CheckboxList.js":"5","/home/ashish/pdfdoc/research-ranking-app/my-app/src/store.js":"6","/home/ashish/pdfdoc/research-ranking-app/my-app/src/SearchResults.js":"7","/home/ashish/pdfdoc/research-ranking-app/my-app/src/FileUpload.js":"8","/home/ashish/pdfdoc/research-ranking-app/my-app/src/Box.js":"9","/home/ashish/pdfdoc/research-ranking-app/my-app/src/Loader.js":"10","/home/ashish/pdfdoc/research-ranking-app/my-app/src/reducers/index.js":"11","/home/ashish/pdfdoc/research-ranking-app/my-app/src/DocList.js":"12","/home/ashish/pdfdoc/research-ranking-app/my-app/src/DocumentList.js":"13","/home/ashish/docpdf/pdfdoc/research-ranking-app/my-app/src/index.js":"14","/home/ashish/docpdf/pdfdoc/research-ranking-app/my-app/src/reportWebVitals.js":"15","/home/ashish/docpdf/pdfdoc/research-ranking-app/my-app/src/App.js":"16","/home/ashish/docpdf/pdfdoc/research-ranking-app/my-app/src/HtmlViewer.js":"17","/home/ashish/docpdf/pdfdoc/research-ranking-app/my-app/src/CheckboxList.js":"18","/home/ashish/docpdf/pdfdoc/research-ranking-app/my-app/src/FileUpload.js":"19","/home/ashish/docpdf/pdfdoc/research-ranking-app/my-app/src/store.js":"20","/home/ashish/docpdf/pdfdoc/research-ranking-app/my-app/src/SearchResults.js":"21","/home/ashish/docpdf/pdfdoc/research-ranking-app/my-app/src/Box.js":"22","/home/ashish/docpdf/pdfdoc/research-ranking-app/my-app/src/Loader.js":"23","/home/ashish/docpdf/pdfdoc/research-ranking-app/my-app/src/DocumentList.js":"24","/home/ashish/docpdf/pdfdoc/research-ranking-app/my-app/src/reducers/index.js":"25","/home/ashish/docpdf/pdfdoc/research-ranking-app/my-app/src/AddTerm.js":"26","/home/ashish/docpdf/pdfdoc/research-ranking-app/my-app/src/textinput.js":"27","/home/ashish/docpdf/pdfdoc/research-ranking-app/my-app/src/fileselector.js":"28","/home/ashish/docpdf/pdfdoc/research-ranking-app/my-app/src/DocRankUI.js":"29"},{"size":535,"mtime":1706214568468,"results":"30","hashOfConfig":"31"},{"size":31607,"mtime":1710268479074,"results":"32","hashOfConfig":"31"},{"size":362,"mtime":1706214568468,"results":"33","hashOfConfig":"31"},{"size":2147,"mtime":1710205191124,"results":"34","hashOfConfig":"31"},{"size":1150,"mtime":1708635949007,"results":"35","hashOfConfig":"31"},{"size":139,"mtime":1706214568468,"results":"36","hashOfConfig":"31"},{"size":1252,"mtime":1707855704301,"results":"37","hashOfConfig":"31"},{"size":9644,"mtime":1706746045948,"results":"38","hashOfConfig":"31"},{"size":2648,"mtime":1708629875819,"results":"39","hashOfConfig":"31"},{"size":455,"mtime":1706214568468,"results":"40","hashOfConfig":"31"},{"size":241,"mtime":1706214568468,"results":"41","hashOfConfig":"31"},{"size":744,"mtime":1707759949277,"results":"42","hashOfConfig":"31"},{"size":1354,"mtime":1707875797553,"results":"43","hashOfConfig":"31"},{"size":535,"mtime":1710451411198,"results":"44","hashOfConfig":"45"},{"size":362,"mtime":1710451411198,"results":"46","hashOfConfig":"45"},{"size":42075,"mtime":1712797444836,"results":"47","hashOfConfig":"45"},{"size":3255,"mtime":1710962024924,"results":"48","hashOfConfig":"45"},{"size":1737,"mtime":1711350070924,"results":"49","hashOfConfig":"45"},{"size":5616,"mtime":1711348013796,"results":"50","hashOfConfig":"45"},{"size":139,"mtime":1710451411198,"results":"51","hashOfConfig":"45"},{"size":1679,"mtime":1711375259604,"results":"52","hashOfConfig":"45"},{"size":2648,"mtime":1710451411194,"results":"53","hashOfConfig":"45"},{"size":455,"mtime":1710451411198,"results":"54","hashOfConfig":"45"},{"size":2931,"mtime":1712797477148,"results":"55","hashOfConfig":"45"},{"size":241,"mtime":1710451411198,"results":"56","hashOfConfig":"45"},{"size":547,"mtime":1710546735798,"results":"57","hashOfConfig":"45"},{"size":3972,"mtime":1710963100964,"results":"58","hashOfConfig":"45"},{"size":1773,"mtime":1711347106172,"results":"59","hashOfConfig":"45"},{"size":1163,"mtime":1710813283501,"results":"60","hashOfConfig":"45"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"w2tep2",{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":40,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"8cc2rb",{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":51,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121"},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125"},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141"},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154"},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158"},"/home/ashish/pdfdoc/research-ranking-app/my-app/src/index.js",[],[],"/home/ashish/pdfdoc/research-ranking-app/my-app/src/App.js",["159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198"],[],"/home/ashish/pdfdoc/research-ranking-app/my-app/src/reportWebVitals.js",[],[],"/home/ashish/pdfdoc/research-ranking-app/my-app/src/HtmlViewer.js",["199","200","201","202"],[],"import React, { useEffect, useState } from \"react\";\nimport \"./HTMLViewer.css\"; // Import your CSS file if needed\nimport htmlpdfviewer from 'html-pdf-viewer';\nimport Button from 'react-bootstrap/Button';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearchPlus, faSearchMinus } from '@fortawesome/free-solid-svg-icons';\n\n\nconst HTMLViewer = ({ html }) => {\n\n  const [scale, setScale] = useState(1.5); // Initial scale factor\n\n  const [pageNum, setPageNum] = useState(1); // State to keep track of current page number\n \n  const handleZoomIn = () => {\n    setScale(scale + 0.1); // Increase scale factor by 0.1\n  };\n\n  const handleZoomOut = () => {\n    if(scale>1.1){\n      setScale(scale - 0.1); \n    }\n    // Decrease scale factor by 0.1\n  };\n\n  useEffect(() => {\n    setPageNum(1);\n\n   \n  }, [html]); // Reset page number whenever the HTML changes\n\n  const goToPrevPage = () => {\n    if (pageNum > 1) {\n      setPageNum(pageNum - 1);\n    }\n  };\n\n  const viewPdf = () => {\n    return htmlpdfviewer(html, { output: { mode: 'display', container: '#iframeId', height: 800 } });\n  }\n\n  const goToNextPage = () => {\n    const iframe = document.getElementById(\"viewer-iframe\");\n    const numPages = iframe.contentWindow.document.querySelectorAll(\"body > div\").length;\n    if (pageNum < numPages) {\n      setPageNum(pageNum + 1);\n    }\n  };\n\n  return (\n    <>\n      <div>\n      <div>\n        {/* <button onClick={handleZoomIn}>Zoom In</button>\n        <button onClick={handleZoomOut}>Zoom Out</button> */}\n\n        <button onClick={handleZoomIn}>\n  <FontAwesomeIcon icon={faSearchPlus} /> Zoom In\n</button>\n<button onClick={handleZoomOut}>\n  <FontAwesomeIcon icon={faSearchMinus} /> Zoom Out\n</button>\n\n\n      </div>\n      <div className=\"iframe-container\">\n        <iframe\n          id=\"viewer-iframe\"\n          title=\"HTML Viewer\"\n          srcDoc={html}\n          style={{\n            transform: `scale(${scale})`, // Dynamically set the scale factor\n            transformOrigin: \"0 0\", // Set the origin of transformation\n          }}\n        />\n      </div>\n     \n    </div>\n    </>\n  );\n};\n\nexport default HTMLViewer;\n","/home/ashish/pdfdoc/research-ranking-app/my-app/src/CheckboxList.js",["203","204"],[],"import React, { useState, useEffect } from \"react\";\n\nfunction CheckboxList({ terms, checkedTerms, setCheckedTerms, onCheckedTerms, colorMap }) {\n\n  useEffect(() => {\n    onCheckedTerms(checkedTerms);\n  }, [checkedTerms]);\n\n  useEffect(() => {\n    console.log(terms);\n  }, [terms]);\n\n\n  const handleCheckboxChange = (event) => {\n    setCheckedTerms({\n      ...checkedTerms,\n      [event.target.name]: event.target.checked,\n    });\n  };\n\n  return (\n    <form>\n      {Object.keys(terms).map((term) => (\n        <div key={term}>\n          <label>\n            <input\n              type=\"checkbox\"\n              name={term}\n              checked={checkedTerms[term] || false}\n              onChange={handleCheckboxChange}\n            />\n            {term}\n          </label> <span style={{ display: 'inline-block', marginLeft: '10px' }}>\n            <div\n              style={{\n                width: '15px',\n                height: '15px',\n                borderRadius: '50%',\n                backgroundColor: colorMap[term],\n              }}\n            ></div>\n          </span>\n        </div>\n      ))}\n    </form>\n  );\n}\n\nexport default CheckboxList;\n","/home/ashish/pdfdoc/research-ranking-app/my-app/src/store.js",[],[],"/home/ashish/pdfdoc/research-ranking-app/my-app/src/SearchResults.js",[],[],"/home/ashish/pdfdoc/research-ranking-app/my-app/src/FileUpload.js",["205","206","207"],[],"import React, { Component } from \"react\";\nimport \"./style.css\"; // import the CSS file with the styles\nimport * as pdfjsLib from 'pdfjs-dist'\nimport { pdfjs, Document } from 'react-pdf';\n// import { Document } from 'react-pdf';\nconst apiUrl = process.env.REACT_APP_API_URL;\nclass FileUpload extends Component {\n  constructor(props) {\n    super(props);\n    // setFileNames\n    this.state = {\n      files: [],\n      loaded: 0,\n      total: 0,\n      error: null,\n      text: {},\n      loadingFiles: false, // Add a loading state\n    };\n    pdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\n  }\n\n  // handleFileChange = async (event) => {\n  //   this.setState({ loadingFiles: true });\n  //   const files = event.target.files;\n  //   const namf = [];\n  \n  //   for (const file of files) {\n  //     const filename = file.name;\n  //     const pdfData = await this.readFileAsync(file);\n  //     const pdfText = await this.extractTextFromPdf(pdfData);\n  \n  //     namf.push(filename);\n  \n  //     this.setState((prevState) => ({\n  //       files: [...prevState.files, file],\n  //       text: {\n  //         ...prevState.text,\n  //         [filename]: pdfText\n  //       }\n  //     }), () => {\n  //       this.props.setFileText(this.state.text);\n  //       this.props.setFileNames(namf);\n  //     });\n  //   }\n  // };\n  handleFileChange = async (event) => {\n    this.setState({ loadingFiles: true }); // Set loading state to true\n\n    const files = event.target.files;\n    const namf = [];\n    const textData = {};\n\n    try {\n      for (const file of files) {\n        const filename = file.name;\n        const pdfData = await this.readFileAsync(file);\n        const pdfText = await this.extractTextFromPdf(pdfData);\n\n        namf.push(filename);\n        textData[filename] = pdfText;\n      }\n\n      this.setState({\n        files: [...this.state.files, ...files],\n        text: { ...this.state.text, ...textData },\n        fileNames: namf,\n      }, () => {\n        this.props.setFileText(this.state.text);\n        this.props.setFileNames(this.state.fileNames);\n        this.setState({ loadingFiles: false }); // Set loading state to false after files are loaded\n        // this.setState({ loadingFiles: true });\n      });\n    } catch (error) {\n      console.error('Error loading files:', error);\n      this.setState({ loadingFiles: false }); // Set loading state to false in case of an error\n    }\n  };\n\n  \n  readFileAsync = (file) => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n  \n      reader.onload = () => {\n        resolve(new Uint8Array(reader.result));\n      };\n  \n      reader.onerror = (error) => {\n        reject(error);\n      };\n  \n      reader.readAsArrayBuffer(file);\n    });\n  };\n\n  \n  \n  // handleFileChange = (event) => {\n\n  //   let namf=[];\n  //   const files = event.target.files;\n  //   console.log(\"files being text processed----\");\n  //   console.log(files);\n  //   this.setState({\n  //         files: [...this.state.files, ...files],\n  //       },()=>{\n\n  //         Array.from(files).forEach((file) => {\n  //           let filename=file.name;\n  //           const reader = new FileReader();\n  //           reader.onload = async () => {\n  //             const pdfData = new Uint8Array(reader.result);\n  //             const pdfText = await this.extractTextFromPdf(pdfData);\n  //             namf.push(filename);\n  //             this.setState({\n  //               text: {\n  //                 ...this.state.text,\n  //                 [filename]: pdfText\n  //               }\n  //             },()=>{\n  //               console.log(\"post set state----\");\n  //               console.log(this.state.text);\n  //               this.props.setFileText(this.state.text);\n  //               this.props.setFileNames(namf);\n              \n  //             });\n  //           };\n      \n  //           reader.readAsArrayBuffer(file);\n  //         });\n\n\n  //       });\n\n\n    \n\n\n  // };\n\n  extractTextFromPdf = async (pdfData) => {\n    const loadingTask = pdfjsLib.getDocument({ data: pdfData });\n    const pdf = await loadingTask.promise;\n    let text = '';\n    for (let i = 1; i <= pdf.numPages; i++) {\n      const page = await pdf.getPage(i);\n      const pageText = await page.getTextContent();\n      pageText.items.forEach((item) => {\n        // Replace any occurrences of connected words with spaced words\n        let spacedText = item.str.replace(/([a-z])([A-Z])/g, '$1 $2');\n        // console.log(\"hello  \"+spacedText);\n        spacedText=spacedText+\" \";\n        text += spacedText;\n      });\n    }\n    console.log(\"hello  \"+text);\n    return text.toLowerCase();\n  }\n  \n\n  // handleUpload = () => {\n\n  //     // Set loading to false when the API call finishes, regardless of success or failure\n  //     this.props.setIsLoading(true);\n  \n  //   const chunkSize = 300 * 1024 * 1024; // 10MB\n\n  //   const { files } = this.state;\n  //   let currentFile = 0;\n\n  //   const uploadNextFile = () => {\n  //     if (currentFile < files.length) {\n  //       const file = files[currentFile];\n  //     //  alert(file.name);\n  //       const fileSize = file.size;\n  //       const chunks = Math.ceil(fileSize / chunkSize);\n  //       let currentChunk = 0;\n\n  //       const uploadChunk = (start, end) => {\n  //         const formData = new FormData();\n  //         const newName = file.name;\n        \n\n  //         formData.append(\"myFile\", file.slice(start, end), newName);\n  //         // fetch(\"http://localhost:3001/api/upload\", {\n  //         fetch(`${apiUrl}/api/upload`, {\n  //           method: \"POST\",\n  //           body: formData,\n  //         })\n  //           .then((response) => {\n  //             if (!response.ok) {\n  //               throw new Error(\"Network response was not ok\");\n  //             }\n  //             currentChunk++;\n  //             this.setState({\n  //               loaded: currentFile * chunkSize + currentChunk * chunkSize,\n  //               total: files.reduce((acc, file) => acc + file.size, 0),\n  //             });\n  //             if (currentChunk < chunks) {\n  //               uploadChunk(\n  //                 currentChunk * chunkSize,\n  //                 (currentChunk + 1) * chunkSize\n  //               );\n  //             } else {\n                \n  //               currentFile++;\n  //               if (currentFile === files.length) {\n  //                 // Set loading to false when the final file is uploaded\n  //                 this.props.setIsLoading(false);\n  //               }\n  //               uploadNextFile();\n\n  //             }\n  //           })\n  //           .catch((error) => {\n  //             this.setState({\n  //               error: error.message,\n  //             });\n  //           })\n  //           .finally(() => {\n  //             // Set loading to false when the API call finishes, regardless of success or failure\n  //             this.props.setIsLoading(false);\n  //           });\n  //       };\n\n  //       uploadChunk(0, chunkSize);\n  //     }\n  //   };\n   \n  //   uploadNextFile();\n  // };\n\n  handleUpload = () => {\n    // Set loading to true before starting the file upload\n    this.props.setIsLoading(true);\n  \n    const chunkSize = 1000 * 1024 * 1024; // 10MB\n    const { files } = this.state;\n  \n    // Function to upload a chunk of a file\n    const uploadChunk = (file, start, end) => {\n      return new Promise((resolve, reject) => {\n        const formData = new FormData();\n        const newName = file.name;\n  \n        formData.append(\"myFile\", file.slice(start, end), newName);\n  \n        fetch(`${apiUrl}/api/upload`, {\n          method: \"POST\",\n          body: formData,\n        })\n          .then((response) => {\n            if (!response.ok) {\n              throw new Error(\"Network response was not ok\");\n            }\n            resolve(); // Resolve the promise when the chunk is uploaded successfully\n          })\n          .catch((error) => {\n            reject(error); // Reject the promise in case of an error\n          });\n      });\n    };\n  \n    // Function to upload the entire file\n    const uploadFile = (file) => {\n      const fileSize = file.size;\n      const chunks = Math.ceil(fileSize / chunkSize);\n      let currentChunk = 0;\n  \n      // Array to store promises for each chunk\n      const chunkPromises = [];\n  \n      // Create promises for each chunk\n      for (let i = 0; i < chunks; i++) {\n        const start = i * chunkSize;\n        const end = (i + 1) * chunkSize;\n        chunkPromises.push(uploadChunk(file, start, end));\n      }\n  \n      // Return a promise that resolves when all chunks are uploaded\n      return Promise.all(chunkPromises);\n    };\n  \n    // Upload all files using Promise.all\n    Promise.all(files.map(uploadFile))\n      .then(() => {\n        // Set loading to false when all files are successfully uploaded\n        this.props.setIsLoading(false);\n      })\n      .catch((error) => {\n        console.error(\"Error during file uploads:\", error);\n        // Set loading to false in case of an error\n        this.props.setIsLoading(false);\n      });\n  };\n  \n\n  render() {\n    const { loaded, total, error } = this.state;\n    const progress = total === 0 ? 0 : Math.round((loaded / total) * 100);\n\n    return (\n      <div className=\"upload-container\"> {/* add the main container class */}\n        <input type=\"file\" onChange={this.handleFileChange}  multiple />\n        <button disabled={this.state.loadingFiles} onClick={this.handleUpload}>Upload</button>\n        {progress > 0 && <div>{progress}% uploaded</div>}\n        {error && <div>{error}</div>}\n      </div>\n    );\n  }\n}\n\nexport default FileUpload;\n","/home/ashish/pdfdoc/research-ranking-app/my-app/src/Box.js",[],[],"/home/ashish/pdfdoc/research-ranking-app/my-app/src/Loader.js",[],[],"/home/ashish/pdfdoc/research-ranking-app/my-app/src/reducers/index.js",[],[],"/home/ashish/pdfdoc/research-ranking-app/my-app/src/DocList.js",["208","209","210","211"],[],"import React, { useEffect, useState } from \"react\";\nimport \"./HTMLViewer.css\"; \nimport htmlpdfviewer from 'html-pdf-viewer';\nimport Button from 'react-bootstrap/Button';\n\n\nconst DocList = ( { documents, handleCheckboxChange }) => {\n  return (\n    <div>\n      <h2>List of Documents</h2>\n      <ul>\n        {documents.map((doc, index) => (\n          <li key={index}>\n            <input\n              type=\"checkbox\"\n              checked={doc.isRanking}\n              onChange={(e) => handleCheckboxChange(index, e.target.checked)}\n            />\n            <a href={doc.url} target=\"_blank\" rel=\"noopener noreferrer\">\n              {doc.name}\n            </a>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default DocList;\n","/home/ashish/pdfdoc/research-ranking-app/my-app/src/DocumentList.js",[],[],"/home/ashish/docpdf/pdfdoc/research-ranking-app/my-app/src/index.js",[],[],"/home/ashish/docpdf/pdfdoc/research-ranking-app/my-app/src/reportWebVitals.js",[],[],"/home/ashish/docpdf/pdfdoc/research-ranking-app/my-app/src/App.js",["212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262"],[],"import React, { useState, useEffect } from \"react\";\n// import \"./App.css\";\nimport HtmlViewer from \"./HtmlViewer\";\nimport CheckboxList from \"./CheckboxList\";\nimport FileUpload from \"./FileUpload\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport SearchResults from \"./SearchResults\";\nimport Box from \"./Box\";\nimport pdfjsLib from \"pdfjs-dist\";\nimport axios from \"axios\";\nimport Loader from \"./Loader\";\nimport styles from './stylenew.css';\n\nimport { useLocation } from 'react-router-dom';\nimport DocumentList from \"./DocumentList\";\nimport AddTerm from \"./AddTerm\";\nimport TextInput from \"./textinput\";\n\nimport FileInput from \"./fileselector\";\n\nimport DocRankUI from \"./DocRankUI\";\n\n\nconst apiUrl = process.env.REACT_APP_API_URL;\n\nexport default function App() {\n\n  const [pdf, setPdf] = React.useState(\"\");\n  const [width, setWidth] = React.useState(0);\n  const [images, setImages] = React.useState([]);\n  const [height, setHeight] = React.useState(0);\n  const [totalPages, setTotalPages] = React.useState(1);\n  const [currentPage, setCurrentPage] = React.useState(1);\n  const [pdfRendering, setPdfRendering] = React.useState(\"\");\n  const [pageRendering, setPageRendering] = React.useState(\"\");\n  const [searchQuery, setSearchQuery] = React.useState(\"\");\n  const [searchResults, setSearchResults] = React.useState([]);\n  const [fileText, setFileText] = React.useState({});\n  const [docranks, setDocRanks] = React.useState({});\n  const [alldocsready, setAllDocsReady] = React.useState(false);\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [currhtml, setcurrhtml] = React.useState(\"\");\n  const [queryterms, setqueryterms] = React.useState([]);\n  const [fileData, setFileData] = useState(\"\");\n  const [querymap, setquerymap] = React.useState([]);\n  const [fileNames, setFileNames] = React.useState([]);\n  const [colorMap, setcolorMap] = React.useState([]);\n  const [showpage, setshowpage] = React.useState(false);\n  const [pdfUrls, setPdfUrls] = useState([]);\n  const [showDocs, setshowdocs] = useState(false);\n  const [allHtmls, setAllHtmls] = useState({});\n  const [currShowing, setCurrShowing] = useState(\"\");\n\n  const [oninit, setonint] = useState(true);\n  const [onranked, setonranked] = useState(false);\n\n  const [newtermsupdate, setnewtermsupdate] = useState(false);\n  const [filesadded, setfilesadded] = useState(false);\n\n\n\n\n  const [showinitbox, setshowinitbox] = useState(true);\n\n  const [showtextinput, setshowtextinput] = useState(false)\n  const [showfileselector, setshowfileselector] = useState(false);\n  const [docrankscreen, setdocrankscreen] = useState(false);\n  const [showrankorpdf, setshowrankorpdf] = useState(true);\n\n  const [enablestartRanking, setenablestartRanking] = useState(false);\n\n  const openinitscreen = () => {\n    setonint(true);\n    setonranked(false);\n    setshowinitbox(true);\n    setshowtextinput(false);\n    setshowfileselector(false);\n    setdocrankscreen(false);\n    setshowrankorpdf(false);\n  }\n\n  const opentermeditor = () => {\n    setshowinitbox(false);\n    setshowtextinput(true);\n    setshowfileselector(false);\n    setdocrankscreen(false);\n    setshowrankorpdf(false);\n  }\n  const openfileuploader = () => {\n    setshowinitbox(false);\n    setshowtextinput(false);\n    setshowfileselector(true);\n    setdocrankscreen(false);\n    setshowrankorpdf(false);\n  }\n  const openrankeddocs = () => {\n    setonint(false);\n    setonranked(true);\n    setshowinitbox(false);\n    setshowtextinput(false);\n    setshowfileselector(false);\n    setdocrankscreen(true);\n    setshowrankorpdf(true);\n  }\n  const openshowpdffile = () => {\n    setonint(false);\n    setonranked(false);\n    setshowinitbox(false);\n    setshowtextinput(false);\n    setshowfileselector(false);\n    setdocrankscreen(true);\n    setshowrankorpdf(false);\n  }\n\n  const reloadPage = () => {\n    window.location.reload(true); // true indicates a hard reload\n  };\n\n  useEffect(() => {\n    console.log(\"currShowing\");\n    console.log(currShowing);\n  }, [currShowing])\n\n  useEffect(() => {\n    console.log(\"fileNames\");\n    console.log(fileNames);\n\n\n    if (queryterms.length > 0 && filesadded) {\n      setenablestartRanking(true);\n    }\n\n  }, [querymap, queryterms, fileNames, filesadded])\n\n\n\n\n  // const [file, setFile] = useState(null);\n\n  // const handleChange = (event) => {\n  //   setFile(event.target.files[0]);\n  // }\n\n  // const handleSubmit = async (event) => {\n  //   event.preventDefault();\n\n  //   const reader = new FileReader();\n\n  //   reader.onload = async (event) => {\n  //     const fileData = event.target.result;\n  //     const fileDataString = fileData.toString();\n  //     console.log(fileDataString)\n\n  //     const path = \"./public/dataaaaaaaaaaaaaaaaaa.txt\";\n  //     try {\n  //       localStorage.setItem(path, fileDataString);\n  //       console.log(\"Data written to localStorage!\");\n  //     } catch (e) {\n  //       console.error(\"Error writing data to localStorage:\", e);\n  //     }\n  //   };\n\n  //   reader.readAsText(file);\n\n  //   setFile(null);\n  // };\n\n\n\n  const closefileinput = () => {\n    setfilesadded(true);\n\n    oninit ? openinitscreen() :\n      onranked ? openrankeddocs() : openshowpdffile();\n\n\n  }\n\n\n  const movetorankscreen = () => {\n    setshowinitbox(false);\n    setshowfileselector(false);\n    setshowtextinput(false);\n    setdocrankscreen(true);\n  }\n  const generateUniqueHighlightColors = () => {\n    const result = [];\n    const hues = [0, 45, 90, 135, 180, 225, 270, 315]; // More diverse hues\n    const saturation = 70; // Fixed saturation for better consistency\n\n    for (let hue of hues) {\n      for (let lightness = 60; lightness <= 90; lightness += 10) {\n        const color = `hsl(${hue}, ${saturation}%, ${lightness}%)`; // Use HSL color model for bright and light colors\n        result.push(color);\n      }\n    }\n\n    return result;\n  };\n  // const generateUniqueHighlightColors = () => {\n  //   const result = [];\n  //   const hues = [0, 60, 120, 180, 240, 300]; // More diverse hues\n  //   const saturations = [50, 70, 90]; // Different saturation levels for variation\n\n  //   for (let hue of hues) {\n  //     for (let saturation of saturations) {\n  //       const lightness = Math.floor(Math.random() * 30) + 60; // Random lightness between 60 and 90\n  //       const color = `hsl(${hue}, ${saturation}%, ${lightness}%)`; // Use HSL color model for bright and light colors\n  //       result.push(color);\n  //     }\n  //   }\n\n  //   return result;\n  // };\n\n\n  // const brightColors = generateUniqueHighlightColors();\n\n  const [brightColors, setbrightColors] = useState(generateUniqueHighlightColors());\n\n  const colorObject = {};\n\n  brightColors.forEach(color => {\n    colorObject[color] = false;\n  });\n\n\n\n  const [documents, setDocuments] = useState(\n    []\n  );\n\n\n  const [param1, setParam1] = useState('');\n  const [param2, setParam2] = useState('');\n\n  useEffect(() => {\n\n    const queryParams = new URLSearchParams(window.location.search);\n    const param1Value = queryParams.get('param1');\n    const param2Value = queryParams.get('param2');\n\n    console.log(\"---------onsole.log(param1Value)\")\n    console.log(param1Value)\n    console.log(\"---------onsole.log(param1Value)\")\n    console.log(param2Value)\n    setParam1(param1Value);\n    setParam2(param2Value);\n\n\n  }, []);\n\n\n  const openReactAppInNewWindow = () => {\n    const url = 'http://sysrev2.cs.binghamton.edu/dart';\n    const jsonString = JSON.stringify([{\n      \"resultId\": 1971,\n      \"document\": {\n        \"title\": \"Distributional Reinforcement Learning in the Brain.\",\n        \"articleDate\": \"2020 Dec\",\n        \"authorNames\": [\n          \"Lowet AS\",\n          \"Zheng Q\",\n          \"Matias S\",\n          \"Drugowitsch J\",\n          \"Uchida N\"\n        ],\n        \"affiliationCountry\": null,\n        \"publicationName\": \"distributional reinforcement learning in the brain\",\n        \"issn\": \"0166-2236\",\n        \"affiliationNames\": null,\n        \"url\": \"https://pubmed.ncbi.nlm.nih.gov/33092893\"\n      },\n      \"priority\": 0,\n      \"datasource\": \"PUBMED\"\n    },\n    {\n      \"resultId\": 1972,\n      \"document\": {\n        \"title\": \"Reinforcement Distributional Learning in the Brain.\",\n        \"articleDate\": \"2020 Dec\",\n        \"authorNames\": [\n          \"Lowet AS\",\n          \"Zheng Q\",\n          \"Matias S\",\n          \"Drugowitsch J\",\n          \"Uchida N\"\n        ],\n        \"affiliationCountry\": null,\n        \"publicationName\": \"distributional reinforcement learning in the brain\",\n        \"issn\": \"0166-2236\",\n        \"affiliationNames\": null,\n        \"url\": \"https://pubmed.ncbi.nlm.nih.gov/33092893\"\n      },\n      \"priority\": 0,\n      \"datasource\": \"PUBMED\"\n    },\n    {\n      \"resultId\": 1973,\n      \"document\": {\n        \"title\": \"Learning Distributional Reinforcement in the Brain.\",\n        \"articleDate\": \"2020 Dec\",\n        \"authorNames\": [\n          \"Lowet AS\",\n          \"Zheng Q\",\n          \"Matias S\",\n          \"Drugowitsch J\",\n          \"Uchida N\"\n        ],\n        \"affiliationCountry\": null,\n        \"publicationName\": \"distributional reinforcement learning in the brain\",\n        \"issn\": \"0166-2236\",\n        \"affiliationNames\": null,\n        \"url\": \"https://pubmed.ncbi.nlm.nih.gov/33092893\"\n      },\n      \"priority\": 0,\n      \"datasource\": \"PUBMED\"\n    },\n    {\n      \"resultId\": 1974,\n      \"document\": {\n        \"title\": \"Brain Distributional Learning in the Reinforcement.\",\n        \"articleDate\": \"2020 Dec\",\n        \"authorNames\": [\n          \"Lowet AS\",\n          \"Zheng Q\",\n          \"Matias S\",\n          \"Drugowitsch J\",\n          \"Uchida N\"\n        ],\n        \"affiliationCountry\": null,\n        \"publicationName\": \"distributional reinforcement learning in the brain\",\n        \"issn\": \"0166-2236\",\n        \"affiliationNames\": null,\n        \"url\": \"https://pubmed.ncbi.nlm.nih.gov/33092893\"\n      },\n      \"priority\": 0,\n      \"datasource\": \"PUBMED\"\n    }]\n\n\n\n\n\n    );\n    const queryParams = `json=${encodeURIComponent(jsonString)}`;\n    const finalUrl = `${url}?${queryParams}`;\n    const newWindow = window.open(finalUrl, '_blank', 'width=800,height=600');\n\n    if (newWindow) {\n      // Optional: Add any additional logic if needed, such as handling popup blockers\n    } else {\n      // Handle case where the new window could not be opened, e.g., due to popup blockers\n      console.error('Failed to open new window');\n    }\n  };\n\n\n  const [htmls, setHtmls] = React.useState(\"\");\n\n  const [checkedTerms, setCheckedTerms] = useState({});\n\n\n  const onMount = async () => {\n    const queryParams = new URLSearchParams(window.location.search);\n    const pdfUrlParam = queryParams.get(\"pdf_urls\");\n\n    const jsonDataParam = queryParams.get(\"json\");\n\n    if (jsonDataParam) {\n      try {\n        const jsonData = JSON.parse(decodeURIComponent(jsonDataParam));\n\n        setDocuments(jsonData)\n        console.log('Received JSON data:', jsonData);\n        // Continue with your logic to process the received JSON data\n      } catch (error) {\n        console.error('Error parsing JSON data:', error);\n      }\n    }\n\n\n    console.log(\"data in api\", jsonDataParam);\n\n  };\n\n  const downloadPdfFromUrl = async (pdfUrl) => {\n    try {\n\n      console.log(\"downloading\" + pdfUrl)\n      // const response = await axios.get(pdfUrl, { responseType: \"arraybuffer\" });\n      // const pdfData = response.data;\n      // // Here, you can save the PDF data or perform any necessary processing.\n      return pdfUrl;\n    } catch (error) {\n      console.error(\"Error downloading PDF from URL:\", pdfUrl, error);\n      return null;\n    }\n  };\n\n\n  useEffect(() => {\n    onMount();\n  }, []); // Call onMount when the component mounts\n\n\n  const handleCheckedTerms = (checkedTerms) => {\n    console.log(\"Checked terms:\", checkedTerms);\n    const trueTerms = Object.keys(checkedTerms).filter(\n      (term) => checkedTerms[term]\n    );\n\n    const falseTerms = Object.keys(checkedTerms).filter(\n      (term) => !checkedTerms[term]\n    );\n\n    // const colorMap = colormap;\n\n    // let htmltemp = htmls;\n    let htmltemp = allHtmls[currShowing];\n\n    // for (let i = 0; i < falseTerms.length; i++) {\n    //   const backgroundStyle = `background-color: white;`;\n\n\n\n\n    //   htmltemp = htmltemp.replace(\n    //     new RegExp(falseTerms[i], \"gi\"),\n    //     `<span style=\"${backgroundStyle}\">${falseTerms[i]}</span>`\n    //   );\n    // }\n\n    for (let i = 0; i < trueTerms.length; i++) {\n      const backgroundColor = colorMap[trueTerms[i]];\n      const backgroundStyle = checkedTerms[trueTerms[i]]\n        ? `\n          background-color: ${backgroundColor};\n          border-radius: 3px; /* Rounded corners */\n          box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.3); /* Drop shadow */\n          padding: 2px 4px; /* Padding for better spacing */\n          color: white; /* Text color on highlighted background */\n          pointer-events: none;\n        `\n        : `background-color: white;`;\n\n      const re = new RegExp(`>${trueTerms[i]}<`, \"gi\");\n      htmltemp = htmltemp.replace(re, (match) => {\n        return match.replace(/<span name = \"highlightedtextdebug\" style=\"[^\"]*\">(.*?)<\\/span>/gi, \"$1\");\n      });\n\n      // htmltemp = htmltemp.replace(\n      //   new RegExp(`>[^<]*(${trueTerms[i]})[^<]*<`, \"gi\"),\n      //   (match) => {\n      //     return match.replace(\n      //       new RegExp(`(${trueTerms[i]})`, \"gi\"),\n      //       `<span style=\"${backgroundStyle}\">$1</span>`\n      //     );\n      //   }\n      // );\n\n      const iframe = document.getElementById('viewer-iframe');\n\n\n      iframe.contentWindow.handleClick = function (event, term) {\n        event.preventDefault(); // Prevent default behavior of clicking on the span tag\n        const targetId = term;\n        const targetElement = document.getElementById(targetId);\n        if (targetElement) {\n          // Scroll to the target element within the iframe\n          targetElement.scrollIntoView();\n        }\n      };\n\n      // const stylePattern = /<style[^>]*>.*?<\\/style>/gs;\n\n      // // Match and replace the style attribute\n      // htmltemp = htmltemp.replace(stylePattern, (match) => {\n\n      //     // Remove or modify the style for #page-container here\n      //     return match.replace(/#page-container/g, '#mo-page-container');\n      // });\n\n      // const originalSubstring = \"#page-container{bottom:0;right:0;overflow:auto}\";\n      // const replacementSubstring = \"#page-container{bottom:0;overflow:auto}\";\n\n      // htmltemp = htmltemp.replace(originalSubstring, replacementSubstring);\n\n\n\n      htmltemp = htmltemp.replace(\n        new RegExp(`(?<![\\\\w</])(${trueTerms[i]})(?![\\\\w/>:=])`, \"gi\"),\n\n\n        // new RegExp(`(?<=^|>)[^<]*(?<![:=])(${trueTerms[i]})(?![^<]*<|[:=])`, \"gi\"),\n\n\n\n        (match, word, index) => {\n\n          const sentence = htmltemp.substring(index - 15, index + 20);\n          console.log(\"Sentence:\", sentence);\n          console.log(\"printing index\", index);\n          const bodyStartIndex = htmltemp.indexOf('<body');\n          const bodyEndIndex = htmltemp.indexOf('</body>');\n\n          if (bodyStartIndex > index || bodyEndIndex < index) {\n            return match;\n          }\n\n\n          const lastopen = htmltemp.substring(bodyStartIndex, index).lastIndexOf(\"<\");\n          const lastclosed = htmltemp.substring(bodyStartIndex, index).lastIndexOf(\">\");\n          const firstopen = htmltemp.substring(index, bodyEndIndex).indexOf(\"<\");\n          const firstclose = htmltemp.substring(index, bodyEndIndex).indexOf(\">\");\n\n          console.log(\"lastopen words----\", lastopen);\n          console.log(\"lastclosed words----\", lastclosed);\n          console.log(\"firstopen words----\", firstopen);\n          console.log(\"firstclose words----\", firstclose);\n\n          if (lastopen > lastclosed || firstopen > firstclose) {\n            return match;\n          }\n\n          console.log(\"matched words----\", match)\n\n          return match.replace(\n            new RegExp(`(?<![\\\\w</])(${trueTerms[i]})(?![\\\\w/>:=])`, \"gi\"),\n            // new RegExp(`(?<=[>])(\\\\b${trueTerms[i]}\\\\b)(?![^<]*<)`, \"gi\"),\n            // new RegExp(`(?<=^|>)[^<]*(?<![:=])(${trueTerms[i]})(?![^<]*<|[:=])`, \"gi\"),\n\n            `<span style=\"${backgroundStyle}\" >$1</span>`\n            // `<span style=\"${backgroundStyle}\" >$1</span>`\n            // `<span style=\"${backgroundStyle}\" pointer-events: none;>$1</span>`\n            // <span style=\"${backgroundStyle}; pointer-events: auto;\" onclick=\"window.location.href = 'http://sysrev2.cs.binghamton.edu:3001/#pf1'\">$1</span>\n\n          );\n        }\n      );\n\n      // htmltemp = htmltemp.replace(\n      //   new RegExp(`([^<>]*>)?([^<]*(${trueTerms[i]})([^<]*<)?[^<>]*)`, \"gi\"),\n      //   (match, before, term, after) => {\n      //     return `${before}<span style=\"${backgroundStyle}\">${term}</span>${after}`;\n      //   }\n      // );\n\n\n    }\n\n    setHtmls(htmltemp);\n  };\n\n\n\n\n  function updateTermObject() {\n    setquerymap((prevQueryMap) => {\n      const updatedQueryMap = { ...prevQueryMap };\n      // Add new terms to the querymap with default value false\n      queryterms.forEach((term) => {\n        if (!updatedQueryMap[term]) {\n          updatedQueryMap[term] = false;\n        }\n      });\n      // Remove terms from the querymap that are missing from queryterms\n      Object.keys(updatedQueryMap).forEach((term) => {\n        if (!queryterms.includes(term)) {\n          delete updatedQueryMap[term];\n        }\n      });\n      return updatedQueryMap;\n    });\n  }\n\n  useEffect(() => {\n    updateTermObject();\n  }, [queryterms]);\n\n  async function showPdf(fnamme) {\n    try {\n      fnamme = fnamme.replace(\"pdf\", \"html\");\n      const path = fnamme;\n\n      fetch(path)\n        .then((response) => response.text())\n        .then((html) => {\n          html = html.replace(/<span class=\"_ _\\d+\"><\\/span>/g, \"\");\n\n          setHtmls(html);\n        });\n    } catch (error) {\n      console.log(\"file not found\");\n    }\n  }\n\n  // const convertPDFToHTML = async () => {\n  //   console.log(\"name of all files--=-=-=-=-\",fileNames);\n  //   let pdfFilePath = \"./sample.pdf\";\n  //   try {\n  //     const response = await fetch(\n  //       `${apiUrl}/api/convert-pdf-to-html?_=${new Date().getTime()}`,\n  //       { timeout: 10000 }\n  //     );\n  //     return await response.text();\n  //   } catch (error) {\n  //     console.error(error);\n  //     throw new Error(\"Failed to convert PDF to HTML\");\n  //   }\n  // };\n\n  const convertPDFToHTML = async () => {\n    console.log(\"name of all files--=-=-=-=-\", fileNames);\n    let pdfFilePath = \"./sample.pdf\";\n    try {\n      const response = await fetch(\n        `${apiUrl}/api/convert-pdf-to-html`,\n        {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({ fileNames })\n        }\n      );\n      return await response.text();\n    } catch (error) {\n      console.error(error);\n      throw new Error(\"Failed to convert PDF to HTML\");\n    }\n  };\n\n\n  const startconversion = async () => {\n\n    if (!enablestartRanking) {\n      alert(\"Please upload documents and add search terms!\");\n      return;\n    }\n\n    setnewtermsupdate(false);\n    setIsLoading(true);\n    await convertPDFToHTML()\n      .then((html) => {\n        // alert(\"yes\");\n        setFileText(cleanTexts(fileText));\n        const resultsdemo = rankTextscos(queryterms, fileText);\n\n        console.log(queryterms);\n        // console.log(fileText);\n        console.log(\"xxxxxx the results doc\" + JSON.stringify(resultsdemo));\n        setAllDocsReady(true);\n        setDocRanks(resultsdemo);\n        console.log(resultsdemo);\n        // getAllHTML();\n        handleFetchFile();\n        setIsLoading(false);\n        openrankeddocs();\n      })\n      .catch((error) => {\n        setIsLoading(false);\n      });\n  };\n\n  function rerankjacc() {\n    setIsLoading(true);\n    const resultsdemo = rankTextsjacc(queryterms, fileText);\n    openReactAppInNewWindow()\n    console.log(queryterms);\n    console.log(fileText);\n    console.log(\"xxxxxx the results doc\" + JSON.stringify(resultsdemo));\n    setAllDocsReady(true);\n    setDocRanks(resultsdemo);\n    setIsLoading(false);\n  }\n\n\n  function setshowingdocs() {\n    setshowdocs(!showDocs)\n  }\n\n\n  function rerankbm25() {\n    setIsLoading(true);\n    const resultsdemo = rankTextsbm25(queryterms, fileText);\n\n    console.log(queryterms);\n    console.log(fileText);\n    console.log(\"xxxxxx the results doc\" + JSON.stringify(resultsdemo));\n    setAllDocsReady(true);\n    setDocRanks(resultsdemo);\n    setIsLoading(false);\n  }\n\n  function rerankcoss() {\n    setIsLoading(true);\n    const resultsdemo = rankTextscos(queryterms, fileText);\n\n    console.log(queryterms);\n    console.log(fileText);\n    console.log(\"xxxxxx the results doc\" + JSON.stringify(resultsdemo));\n    setAllDocsReady(true);\n    setDocRanks(resultsdemo);\n    setIsLoading(false);\n  }\n\n  function cleanTexts(obj) {\n    const cleanObj = {};\n    const regex = /[^a-zA-Z0-9 ]/g; // Regex to match non-alphanumeric characters\n    for (const [key, value] of Object.entries(obj)) {\n      const cleanText = value.replace(regex, \" \"); // Replace non-alphanumeric characters with spaces\n      cleanObj[key] = cleanText.trim(); // Trim leading and trailing spaces and add to new object\n    }\n    return cleanObj;\n  }\n\n\n\n\n  async function renderPage() {\n    setPageRendering(true);\n    const imagesList = [];\n    const canvas = document.createElement(\"canvas\");\n    canvas.setAttribute(\"className\", \"canv\");\n    let canv = document.querySelector(\".canv\");\n\n    for (let i = 1; i <= pdf.numPages; i++) {\n      var page = await pdf.getPage(i);\n      var viewport = page.getViewport({ scale: 1 });\n      canvas.height = viewport.height;\n      canvas.width = viewport.width;\n      var render_context = {\n        canvasContext: canvas.getContext(\"2d\"),\n        viewport: viewport,\n      };\n      console.log(\"page lenght\", pdf.numPages);\n      setWidth(viewport.width);\n      setHeight(viewport.height);\n      await page.render(render_context).promise;\n      let img = canvas.toDataURL(\"image/png\");\n      imagesList.push(img);\n    }\n    setImages(imagesList);\n    setPageRendering(false);\n  }\n\n  useEffect(() => {\n    pdf && renderPage();\n  }, [pdf, currentPage]);\n\n  function rankTextsbm25(terms, texts) {\n    const docVectors = {}; // stores the term frequency vectors for each document\n    const docs = Object.keys(texts); // get an array of the document names\n    const wordSet = new Set(terms); // create a set of the terms to use for matching\n\n    // calculate the inverse document frequency for each term\n    const idf = {};\n    docs.forEach((doc) => {\n      const words = new Set(texts[doc].toLowerCase().match(/\\b\\w+\\b/g)); // split the text into words and convert to a set\n      words.forEach((word) => {\n        if (idf[word]) {\n          idf[word]++;\n        } else {\n          idf[word] = 1;\n        }\n      });\n    });\n    Object.keys(idf).forEach((term) => {\n      idf[term] = Math.log(docs.length / idf[term]);\n    });\n\n    // iterate over each document to calculate the term frequency vector\n    docs.forEach((doc) => {\n      const words = texts[doc].toLowerCase().match(/\\b\\w+\\b/g); // split the text into words\n      const tf = {}; // stores the term frequency for each word\n      words.forEach((word) => {\n        if (tf[word]) {\n          tf[word]++;\n        } else {\n          tf[word] = 1;\n        }\n      });\n      // store the vector and the word count for the document\n      docVectors[doc] = { vector: tf, wordCount: words.length };\n    });\n\n    // calculate the Okapi BM25 score for each document\n    const results = docs.map((doc) => {\n      const { vector: docVector, wordCount } = docVectors[doc];\n      let score = 0;\n      const matchedWords = [];\n      terms.forEach((term) => {\n        if (docVector[term]) {\n          const tf = docVector[term];\n          const k1 = 1.2;\n          const b = 0.75;\n          const avgDocLength =\n            docs.reduce((sum, doc) => {\n              return sum + docVectors[doc].wordCount;\n            }, 0) / docs.length;\n          const idfScore = idf[term];\n          const docLengthNorm = 1 - b + b * (wordCount / avgDocLength);\n          const tfScore = ((k1 + 1) * tf) / (k1 * docLengthNorm + tf);\n          score += idfScore * tfScore;\n          matchedWords.push({ word: term, count: docVector[term] });\n        }\n      });\n      return {\n        name: doc,\n        score: score,\n        matchedWords: matchedWords,\n      };\n    });\n\n    results.sort((a, b) => {\n      return b.score - a.score;\n    });\n\n    return results;\n  }\n\n  function rankTextsjacc(terms, texts) {\n    const docVectors = {}; // stores the term frequency vectors for each document\n    const docs = Object.keys(texts); // get an array of the document names\n    const wordSet = new Set(terms); // create a set of the terms to use for matching\n\n    // iterate over each document to calculate the term frequency vector\n    docs.forEach((doc) => {\n      const words = texts[doc].toLowerCase().match(/\\b\\w+\\b/g); // split the text into words\n      const tf = {}; // stores the term frequency for each word\n      words.forEach((word) => {\n        if (tf[word]) {\n          tf[word]++;\n        } else {\n          tf[word] = 1;\n        }\n      });\n      // store the vector and the word count for the document\n      docVectors[doc] = { vector: tf, wordCount: words.length };\n    });\n\n    // calculate the Jaccard similarity between the term frequency vectors and the query vector\n    const queryVector = {};\n    terms.forEach((term) => {\n      queryVector[term] = 1;\n    });\n\n    const results = docs.map((doc) => {\n      const { vector: docVector, wordCount } = docVectors[doc];\n      const intersection = {};\n      let intersectionSize = 0;\n      let unionSize = wordCount;\n      Object.keys(queryVector).forEach((term) => {\n        if (docVector[term]) {\n          intersection[term] = docVector[term];\n          intersectionSize += docVector[term];\n        } else {\n          unionSize += 1;\n        }\n      });\n\n      const jaccardSimilarity = intersectionSize / unionSize;\n\n      const matchedWords = Object.keys(intersection).map((word) => {\n        return { word: word, count: intersection[word] };\n      });\n\n      return {\n        name: doc,\n        score: jaccardSimilarity,\n        matchedWords: matchedWords,\n      };\n    });\n\n    results.sort((a, b) => {\n      return b.score - a.score;\n    });\n\n    return results;\n  }\n\n  function rankTextscos(terms, texts) {\n    const docVectors = {}; // stores the term frequency vectors for each document\n    const docs = Object.keys(texts); // get an array of the document names\n    const wordSet = new Set(terms); // create a set of the terms to use for matching\n    console.log(\"----docs in ranking\");\n\n    console.log(texts);\n    // iterate over each document to calculate the term frequency vector\n    docs.forEach((doc) => {\n      const words = texts[doc].toLowerCase().match(/\\b\\w+\\b/g); // split the text into words\n      console.log(\"--------\");\n      console.log(words);\n      console.log(\"--------\");\n      const tf = {}; // stores the term frequency for each word\n      var maxFreq = 0; // stores the highest frequency of any word in the document\n      words.forEach((word) => {\n        if (tf[word]) {\n          tf[word]++;\n        } else {\n          tf[word] = 1;\n        }\n        maxFreq = Math.max(maxFreq, tf[word]);\n      });\n      // normalize the term frequency vector by dividing each frequency by the max frequency\n      const docVector = {};\n      Object.keys(tf).forEach((word) => {\n        docVector[word] = tf[word];\n      });\n      docVectors[doc] = { vector: docVector, wordCount: words.length }; // store the vector and the word count for the document\n    });\n\n    // calculate the cosine similarity between the term frequency vectors and the query vector\n    const queryVector = {};\n    terms.forEach((term) => {\n      queryVector[term] = 1;\n    });\n    const results = docs.map((doc) => {\n      const { vector: docVector, wordCount } = docVectors[doc];\n      const dotProduct = Object.keys(queryVector).reduce((sum, term) => {\n        if (docVector[term]) {\n          return sum + queryVector[term] * docVector[term];\n        } else {\n          return sum;\n        }\n      }, 0);\n      const queryMagnitude = Math.sqrt(\n        Object.keys(queryVector).reduce((sum, term) => {\n          return sum + queryVector[term] * queryVector[term];\n        }, 0)\n      );\n      const docMagnitude = Math.sqrt(\n        Object.keys(docVector).reduce((sum, term) => {\n          return sum + docVector[term] * docVector[term];\n        }, 0)\n      );\n      const cosineSimilarity = dotProduct / (queryMagnitude * docMagnitude);\n      // find the words in the text that match the query terms and calculate their frequency in the document\n      // find the words in the text that match the query terms and calculate their frequency in the document\n      const matchedWords = Object.keys(docVector)\n        .filter((word) => {\n          return wordSet.has(word);\n        })\n        .map((word) => {\n          return { word: word, count: docVector[word] }; // use the frequency directly\n        });\n\n      return {\n        name: doc,\n        score: cosineSimilarity,\n        matchedWords: matchedWords,\n      };\n    });\n\n    results.sort((a, b) => {\n      return b.score - a.score;\n    });\n    setAllDocsReady(true);\n    return results;\n  }\n\n  // const handleFetchFile = async (fileName) => {\n  //   try {\n  //     const response = await axios.get(\n  //       `${apiUrl}/api/getFile/${fileName}`\n  //     );\n  //     console.group(\"found html file \" + response.data);\n  //     setHtmls(response.data);\n  //   } catch (error) {\n  //     console.error(`Error fetching file ${fileName}: ${error.message}`);\n  //   }\n  // };\n\n  const handleFetchFile = async (fileName = \"\") => {\n    console.log(\"handleFetchFile called\")\n\n    if (fileName != \"\" && allHtmls.hasOwnProperty(fileName)) {\n      setHtmls(allHtmls[fileName]);\n      return;\n    }\n    try {\n      const promises = fileNames.map(async (fn) => {\n        fn = fn.replace(\"pdf\", \"html\");\n        const response = await axios.get(`${apiUrl}/api/getFile/${fn}`);\n        let hml = response.data;\n        const originalSubstring = \"#page-container{bottom:0;right:0;overflow:auto}\";\n        const replacementSubstring = \"#page-container{bottom:0;overflow:auto}\";\n\n        hml = hml.replace(originalSubstring, replacementSubstring);\n\n\n        return { [fn]: hml }; // Return an object with file name as key and file content as value\n      });\n\n      const filesData = await Promise.all(promises);\n\n      // Combine file data into a single object\n      const filesObject = filesData.reduce((acc, cur) => ({ ...acc, ...cur }), {});\n      setAllHtmls(filesObject)\n      if (fileName != \"\") {\n        setHtmls(filesObject[fileName]);\n      }\n\n    } catch (error) {\n      console.error(`Error fetching files: ${error.message}`);\n    }\n  };\n\n\n  function showranks() {\n    setshowrankorpdf(true)\n    setshowpage(false);\n  }\n  function showthispdf(fnamme) {\n    setshowpage(true);\n    openshowpdffile();\n    // setshowrankorpdf(false);\n    fnamme = fnamme.replace(\"pdf\", \"html\");\n    setCurrShowing(fnamme);\n    handleFetchFile(fnamme);\n  }\n\n  return (\n    <Provider store={store}>\n      {/* <div className=\"container\">\n        <div className=\"first-row\">\n          <div className=\"header\">\n            <h2>PaperRank</h2>\n            <h5>\"Accelerate Your Research\"</h5>\n\n          </div>\n\n          <div className=\"queryupload\">\n            <Loader isLoading={isLoading} />\n            <div class=\"section\">\n              <div class=\"container-fluid\">\n                <div class=\"row\">\n                  <div class=\"q col-sm-6\">\n                    <h4>Query</h4>\n                    <Box queryterms={queryterms} brightColors={brightColors} setbrightColors={setbrightColors} setcolorMap={setcolorMap} setqueryterms={setqueryterms} />\n                  </div>\n                  <div class=\"f col-sm-6\">\n                    <h4>File Upload</h4>\n                    <i class=\"fa-solid fa-cloud-arrow-up\"></i> <FileUpload setIsLoading={setIsLoading} setFileText={setFileText} setFileNames={setFileNames} />\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"right-column\">\n            <div class=\"row\">\n              <div id=\"pdf-contents\">\n                <div id=\"pdf-meta\">\n                  <div id=\"pdf-buttons\">\n                    <div class=\"terms col-sm-1\"></div>\n                    <div class=\"terms col-sm-2\">\n                      <button onClick={startconversion}>Start Ranking</button>\n                    </div>\n\n                    <div class=\"terms col-sm-2\">\n                      <button onClick={rerankcoss}>Start cosine ranking</button>\n                    </div>\n\n                    <div class=\"terms col-sm-2\">\n                      <button onClick={rerankjacc}>Start jaccard ranking</button>\n                    </div>\n\n                 \n\n                    {documents.length > 0 && <div class=\"terms col-sm-2\">\n                      <button onClick={() => { setshowingdocs() }}>Show docs</button>\n                    </div>}\n\n                    <div class=\"terms col-sm-2\">\n                      <button onClick={showranks}>{\"< Back to document ranks\"}</button>\n                    </div>\n                    <div class=\"terms col-sm-1\"></div>\n\n\n                  </div>\n\n                  <div></div>\n                </div>\n              </div>\n            </div>\n\n          </div>\n        </div>\n\n        <div className=\"second-row\">\n          <div className=\"afterupload\">\n            <div class=\"p row\">\n              <div class=\"first-column\">\n\n\n\n                {(documents.length > 0) && showDocs ? (<div id=\"pdf-main-container\">\n\n                  <DocumentList handleCheckboxChange={() => { console.log(\"hc---\") }} documents={documents} />\n\n                </div>)\n\n                  :\n\n\n                  (showpage ?\n\n                    <div id=\"pdf-main-container\">\n\n                      <HtmlViewer html={htmls} />\n\n                    </div>\n                    // )\n                    :\n                    alldocsready ? (\n                      <div id=\"pdf-main-container\"> <div>\n                        <SearchResults results={docranks} showthispdf={showthispdf} />\n                      </div></div>\n                    ) : (\n                      \"\"\n                    )\n                  )}\n              </div>\n              <div className=\"second-column\">\n                <div class=\"terms col-sm-3\">\n\n                  <h1>Terms</h1>\n                  <CheckboxList\n                    terms={querymap}\n                    colorMap={colorMap}\n                    checkedTerms={checkedTerms}\n                    setCheckedTerms={setCheckedTerms}\n                    onCheckedTerms={handleCheckedTerms}\n                  />\n                </div>\n\n\n              </div>\n            </div>\n\n\n\n          </div>\n\n        </div>\n      </div> */}\n      {/* <div class=\"fotter\">\n      </div> */}\n\n      {/* new ui */}\n\n      <div className=\"app-container\">\n        <Loader isLoading={isLoading} />\n\n        <div className=\"mac-book-pro141-container\">\n          <div className=\"mac-book-pro141-mac-book-pro141\">\n            <div className=\"mac-book-pro141-frame1\">\n             \n              <span className=\"mac-book-pro141-text\">\n                <span>  <span className=\"appnametext\">DART</span> : Document Analysis and Research Tool</span>\n              </span>\n           \n              {/* <img\n                src=\"./assets/images/external/ictwotonereadmore2380-sg1m.svg\"\n                alt=\"ictwotonereadmore2380\"\n                className=\"mac-book-pro141-ictwotonereadmore\"\n              /> */}\n              <div className=\"mac-book-pro141-iconparkoutlinemoreapp\">\n                <div className=\"mac-book-pro141-group\">\n                  {/* <img\n                    src=\"./assets/images/external/vector2392-vwv.svg\"\n                    alt=\"Vector2392\"\n                    className=\"mac-book-pro141-vector\"\n                  /> */}\n                  {/* <img\n                    src=\"/assets/images/external/vector2393-328f.svg\"\n                    alt=\"Vector2393\"\n                    className=\"mac-book-pro141-vector1\"\n                  /> */}\n\n                </div>\n              </div>\n            </div>\n\n\n            <div className=\"bodycontainer1\">\n\n            {showDocs ? (\n                  <div className=\"showdocsdiv\">\n                    <div id=\"showdocdivs\">\n                      <DocumentList setshowdocs={setshowdocs} fileNames={fileNames} handleCheckboxChange={() => { console.log(\"hc---\") }} documents={documents} />\n\n                    </div>\n                  </div>\n                ) : ''}\n\n              {showinitbox && !showtextinput && !showfileselector && (documents.length>0 || fileNames.length>0) && <div class=\"filelistbutdiv\">\n                              <button className=\"filelistbut\" onClick={() => { setshowdocs(!showDocs) }}>{!showDocs ? \"Open Files List\" : \"Close File List\"}</button>\n                            </div> \n              }\n\n              {showinitbox && !showtextinput && !showfileselector ?\n                // {true ?\n\n\n                <div className=\"positioningrelative\">\n\n                \n                  <div className=\"mac-book-pro141-initcomp\">\n\n\n\n                    <div className=\"mac-book-pro141-searchboxmain\">\n\n                      <button onClick={openfileuploader} className=\"mac-book-pro141-rectangle22\">\n                        <div className=\"mac-book-pro141-materialsymbolsupload\"></div>\n\n                        <div className=\"mac-book-pro141-text02\">\n                          <span>UPLOAD PAPERS</span>\n                        </div>\n                      </button>\n\n\n\n\n                    </div>\n\n\n\n\n\n                    <div className=\"mac-book-pro141-searchboxmain2\">\n\n                      <button onClick={opentermeditor} className=\"mac-book-pro141-rectangle22\">\n                        <div className=\"mac-book-pro141-materialsymbolsupload\"></div>\n\n                        <div className=\"mac-book-pro141-text02\">\n                          <span>ADD SEARCH TERMS</span>\n                        </div>\n                      </button>\n                    </div>\n\n\n                    <button onClick={startconversion} className=\"mac-book-pro141-startbutton\">\n\n                      <div className=\"mac-book-pro141-text16\">\n                        <span>Start Ranking</span>\n                      </div>\n\n                    </button>\n\n\n\n\n                  </div>\n                </div> : ''}\n\n\n              {showfileselector ?\n                <FileInput fileNames={fileNames} setIsLoading={setIsLoading} setFileText={setFileText} setFileNames={setFileNames} closefileinput={closefileinput} />\n                : ''}\n\n              {showtextinput ?\n                <TextInput setnewtermsupdate={setnewtermsupdate} queryterms={queryterms} brightColors={brightColors} setbrightColors={setbrightColors} setcolorMap={setcolorMap} setqueryterms={setqueryterms} closetextinput={closefileinput} />\n                : ''}\n\n              {docrankscreen ? <>\n\n                <div className=\"menubuttons\">\n                  <div class=\"terms cs1\"></div>\n                  <div class=\"terms cs2\">\n                    {\n                      newtermsupdate ? <button className=\"menubutton2-alert\" onClick={startconversion}>Update Ranks</button>\n                        : <button className=\"menubutton2\" onClick={startconversion}>Re-Rank Documents</button>\n\n                    }\n                  </div>\n                  <div class=\"terms cs2\">\n                    <button className=\"menubutton2\" onClick={opentermeditor}>EDIT TERMS</button>\n                  </div>\n\n                  {/* <div class=\"terms cs2\">\n                    <button className=\"menubutton2\" onClick={opentermeditor}>Uploaded Files</button>\n                  </div> */}\n\n                 {/* {documents.length>0  &&  */}\n                 <div class=\"terms cs2\">\n                    <button className=\"menubutton2\" onClick={() => { setshowdocs(!showDocs) }}>{!showDocs ? \"Open Files List\":\"Close File List\"}</button>\n                  </div>\n                   {/* } */}\n\n                  {/* <div class=\"terms cs2\">\n                    <button className=\"menubutton2\" onClick={rerankjacc}>test new tab</button>\n                  </div> */}\n\n\n                  <div class=\"terms cs2\">\n                    <button className=\"menubuttonreset\" onClick={reloadPage}>Start Again</button>\n                  </div>\n\n                  {/* {documents.length > 0 && <div class=\"terms col-sm-2\">\n                    <button onClick={() => { fileuploader }}>Show docs</button>\n                  </div>} */}\n\n                  {!showrankorpdf &&\n                    <div class=\"terms cs2\">\n                      <button className=\"menubutton2\" onClick={openrankeddocs}>SHOW RANKS</button>\n                    </div>}\n                  <div class=\"terms cs1\"></div>\n\n                </div>\n\n               \n                {showrankorpdf ?\n\n                  <DocRankUI results={docranks} showthispdf={showthispdf} />\n\n                  : <><div id=\"pdf-main-container\">\n\n                    <HtmlViewer html={htmls} />\n                  </div>\n                    <div class=\"terms col-sm-3\">\n\n                      <h1>Terms</h1>\n                      <CheckboxList\n                        currShowing={currShowing}\n                        results={docranks}\n                        terms={querymap}\n                        colorMap={colorMap}\n                        checkedTerms={checkedTerms}\n                        setCheckedTerms={setCheckedTerms}\n                        onCheckedTerms={handleCheckedTerms}\n                      />\n                    </div></>\n                }\n              </>\n                : ''}\n            </div>\n\n            {/* component 1 upload and input screen ---- */}\n          </div>\n        </div>\n      </div>\n    </Provider>\n  );\n}\n","/home/ashish/docpdf/pdfdoc/research-ranking-app/my-app/src/HtmlViewer.js",["263","264","265","266","267","268","269","270"],[],"import React, { useEffect, useState, useRef } from \"react\";\nimport \"./HTMLViewer.css\"; // Import your CSS file if needed\nimport htmlpdfviewer from 'html-pdf-viewer';\nimport Button from 'react-bootstrap/Button';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearchPlus, faSearchMinus } from '@fortawesome/free-solid-svg-icons';\n\n\nconst HTMLViewer = ({ html }) => {\n\n  const [scale, setScale] = useState(1.2); // Initial scale factor\n\n  const [pageNum, setPageNum] = useState(1); // State to keep track of current page number\n\n  const [htmlWidth, setHtmlWidth] = useState(0); // State to store the width of HTML content\n  const hiddenDivRef = useRef(null); // Ref for hidden div\n  \n  useEffect(() => {\n    const tempDiv = document.createElement(\"div\");\n    tempDiv.innerHTML = html;\n    tempDiv.style.visibility = \"hidden\";\n    document.body.appendChild(tempDiv);\n  \n    // Check if sidebar and pagecontainer exist before accessing their properties\n    const sidebarElement = tempDiv.querySelector(\"#sidebar\");\n    const pageContainerElement = tempDiv.querySelector(\"#page-container\");\n    \n    if (sidebarElement && pageContainerElement) {\n      const sidebarWidth = sidebarElement.offsetWidth;\n      console.log(\"Width of sidebar:\", sidebarWidth);\n      \n      const pageContainerWidth = pageContainerElement.offsetWidth;\n      console.log(\"Width of pagecontainer:\", pageContainerWidth);\n\n\n      if (pageContainerElement<650){\n        setScale(scale+1);\n\n      }\n    } else {\n      console.error(\"Could not find sidebar or pagecontainer element in HTML.\");\n    }\n  \n    // Cleanup: remove the temporary div from the DOM\n    document.body.removeChild(tempDiv);\n  }, []);\n  \n\n\n  const handleZoomIn = () => {\n    setScale(scale + 0.1); // Increase scale factor by 0.1\n  };\n\n  const handleZoomOut = () => {\n    if(scale>1.1){\n      setScale(scale - 0.1); \n    }\n    // Decrease scale factor by 0.1\n  };\n\n  useEffect(()=>{console.log(scale)},[scale])\n  useEffect(() => {\n    setPageNum(1);\n\n   \n  }, [html]); // Reset page number whenever the HTML changes\n\n  const goToPrevPage = () => {\n    if (pageNum > 1) {\n      setPageNum(pageNum - 1);\n    }\n  };\n\n  const viewPdf = () => {\n    return htmlpdfviewer(html, { output: { mode: 'display', container: '#iframeId', height: 800 } });\n  }\n\n  const goToNextPage = () => {\n    const iframe = document.getElementById(\"viewer-iframe\");\n    const numPages = iframe.contentWindow.document.querySelectorAll(\"body > div\").length;\n    if (pageNum < numPages) {\n      setPageNum(pageNum + 1);\n    }\n  };\n\n  return (\n    <>\n      <div className=\"pdfcontainerinside\">\n\n        <button onClick={handleZoomIn}>\n  <FontAwesomeIcon icon={faSearchPlus} /> Zoom In\n</button>\n<button onClick={handleZoomOut}>\n  <FontAwesomeIcon icon={faSearchMinus} /> Zoom Out\n</button>\n\n\n      {/* </div> */}\n      <div className=\"iframe-container\">\n        <iframe\n          id=\"viewer-iframe\"\n          title=\"HTML Viewer\"\n          srcDoc={html}\n          style={{\n            transform: `scale(${scale})`, // Dynamically set the scale factor\n            transformOrigin: \"0 0\", // Set the origin of transformation\n          }}\n        />\n      </div>\n     \n    </div>\n    </>\n  );\n};\n\nexport default HTMLViewer;\n","/home/ashish/docpdf/pdfdoc/research-ranking-app/my-app/src/CheckboxList.js",["271","272"],[],"import React, { useState, useEffect } from \"react\";\n\nfunction CheckboxList({ results,currShowing, terms, checkedTerms, setCheckedTerms, onCheckedTerms, colorMap }) {\n\n  useEffect(() => {\n    onCheckedTerms(checkedTerms);\n  }, [checkedTerms]);\n\n  useEffect(() => {\n    console.log(terms);\n  }, [terms]);\n  const [wordc,setwordc]=useState({});\n\n\n\n  \n  useEffect(()=>{\n\n    const baseFileName = currShowing.replace(\".html\", \".pdf\");\n    let wordCounts = {};\n    for (let fileObj of results) {\n      if (fileObj.name === baseFileName) {\n        \n          for (let matchedWord of fileObj.matchedWords) {\n              wordCounts[matchedWord.word] = matchedWord.count;\n          }\n         \n      }\n     \n  }\n  console.log(\"wordCounts\");\n  console.log(wordCounts);\n  setwordc(wordCounts);\n\n  },[currShowing])\n\n\n  const handleCheckboxChange = (event) => {\n    setCheckedTerms({\n      ...checkedTerms,\n      [event.target.name]: event.target.checked,\n    });\n  };\n\n  return (\n    <form>\n      {Object.keys(terms).map((term) => (\n        <div key={term}>\n          <label>\n            <input\n              type=\"checkbox\"\n              name={term}\n              checked={checkedTerms[term] || false}\n              onChange={handleCheckboxChange}\n            />\n            {`${term}    (${wordc[term] || 0})`}\n          </label> \n          \n          <span style={{ display: 'inline-block', marginLeft: '10px' }}>\n            <div\n              style={{\n                width: '15px',\n                height: '15px',\n                borderRadius: '50%',\n                backgroundColor: colorMap[term],\n              }}\n            >\n            </div>\n          </span>\n        </div>\n      ))}\n    </form>\n  );\n}\n\nexport default CheckboxList;\n","/home/ashish/docpdf/pdfdoc/research-ranking-app/my-app/src/FileUpload.js",["273","274","275","276","277"],[],"import React, { Component } from \"react\";\nimport \"./style.css\"; // import the CSS file with the styles\nimport * as pdfjsLib from 'pdfjs-dist'\nimport { pdfjs, Document } from 'react-pdf';\nimport \"./fileselector.css\"\n// import { Document } from 'react-pdf';\nconst apiUrl = process.env.REACT_APP_API_URL;\nclass FileUpload extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      files: [],\n      loaded: 0,\n      total: 0,\n      error: null,\n      text: {},\n      loadingFiles: false,\n      showcompletebutton: false,\n    };\n    pdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\n  }\n\n  handleFileChange = async (event) => {\n    this.props.setIsLoading(true);\n    this.setState({ loadingFiles: true });\n\n    const files = event.target.files;\n    const namf = [];\n    const textData = {};\n\n    try {\n      for (const file of files) {\n        const filename = file.name;\n        const pdfData = await this.readFileAsync(file);\n        const pdfText = await this.extractTextFromPdf(pdfData);\n\n        namf.push(filename);\n        textData[filename] = pdfText;\n      }\n\n      this.setState({\n        files: [...this.state.files, ...files],\n        text: { ...this.state.text, ...textData },\n        fileNames: namf,\n\n\n      }, () => {\n        this.props.setFileText(this.state.text);\n        this.props.setFileNames(this.state.fileNames);\n        this.setState({ loadingFiles: false, showcompletebutton: true });\n        this.props.setIsLoading(false);\n        \n      });\n    } catch (error) {\n      console.error('Error loading files:', error);\n      this.setState({ loadingFiles: false });\n      this.props.setIsLoading(false);\n    }\n  };\n\n\n  readFileAsync = (file) => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n\n      reader.onload = () => {\n        resolve(new Uint8Array(reader.result));\n      };\n\n      reader.onerror = (error) => {\n        reject(error);\n      };\n\n      reader.readAsArrayBuffer(file);\n    });\n  };\n\n  extractTextFromPdf = async (pdfData) => {\n    const loadingTask = pdfjsLib.getDocument({ data: pdfData });\n    const pdf = await loadingTask.promise;\n    let text = '';\n    for (let i = 1; i <= pdf.numPages; i++) {\n      const page = await pdf.getPage(i);\n      const pageText = await page.getTextContent();\n      pageText.items.forEach((item) => {\n\n        let spacedText = item.str.replace(/([a-z])([A-Z])/g, '$1 $2');\n\n        spacedText = spacedText + \" \";\n        text += spacedText;\n      });\n    }\n    console.log(\"hello  \" + text);\n    return text.toLowerCase();\n  }\n\n\n  handleUpload = () => {\n    this.props.setIsLoading(true);\n\n    const chunkSize = 1000 * 1024 * 1024;\n    const { files } = this.state;\n    const uploadChunk = (file, start, end) => {\n      return new Promise((resolve, reject) => {\n        const formData = new FormData();\n        const newName = file.name;\n\n        formData.append(\"myFile\", file.slice(start, end), newName);\n\n        fetch(`${apiUrl}/api/upload`, {\n          method: \"POST\",\n          body: formData,\n        })\n          .then((response) => {\n            if (!response.ok) {\n              throw new Error(\"Network response was not ok\");\n            }\n            resolve();\n          })\n          .catch((error) => {\n            reject(error);\n          });\n      });\n    };\n\n    const uploadFile = (file) => {\n      const fileSize = file.size;\n      const chunks = Math.ceil(fileSize / chunkSize);\n      let currentChunk = 0;\n\n      const chunkPromises = [];\n\n      for (let i = 0; i < chunks; i++) {\n        const start = i * chunkSize;\n        const end = (i + 1) * chunkSize;\n        chunkPromises.push(uploadChunk(file, start, end));\n      }\n\n      return Promise.all(chunkPromises);\n    };\n\n    Promise.all(files.map(uploadFile))\n      .then(() => {\n        this.props.setIsLoading(false);\n        this.props.closefileinput();\n        alert(\"files successfully uploaded !\");\n      })\n      .catch((error) => {\n        console.error(\"Error during file uploads:\", error);\n        this.props.setIsLoading(false);\n      });\n  };\n\n\n  render() {\n    const { loaded, total, error } = this.state;\n    const progress = total === 0 ? 0 : Math.round((loaded / total) * 100);\n\n    return (\n      <div>\n        <div >\n\n          {!this.state.showcompletebutton ?\n            <label htmlFor=\"file-input\" className=\"file-input-label\">\n              <div className=\"filetext\" >Click here to Select Files to Upload</div>\n              <input id=\"file-input\" type=\"file\" name=\"file\" accept=\"application/pdf\" onChange={this.handleFileChange} multiple className=\"file-input\" />\n            </label>\n            :\n            <>\n\n              {/* {this.state.files && this.state.files.length > 0 ?\n                <div className=\"filetext\" >{this.state.files.length} files selected.</div>\n\n                : ''}\n\n              {this.state.files && this.state.files.length > 0 ?\n\n                <div className=\"selectedfiles\">{this.state.fileNames.map((ff) => <div className=\"filenametext\">{ff}</div>)}</div>\n\n                : ''} */}\n\n              {this.state.files && this.state.files.length > 0 &&\n                <button disabled={this.state.loadingFiles} onClick={this.handleUpload} className=\"file-input-label\">\n                <div className=\"mac-book-pro141-materialsymbolsupload\"></div>\n                <div className=\"filetext\" >Click to upload {this.state.files.length} selected papers.</div>\n              </button>}\n            </>\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default FileUpload;\n","/home/ashish/docpdf/pdfdoc/research-ranking-app/my-app/src/store.js",[],[],"/home/ashish/docpdf/pdfdoc/research-ranking-app/my-app/src/SearchResults.js",[],[],"/home/ashish/docpdf/pdfdoc/research-ranking-app/my-app/src/Box.js",[],[],"/home/ashish/docpdf/pdfdoc/research-ranking-app/my-app/src/Loader.js",[],[],"/home/ashish/docpdf/pdfdoc/research-ranking-app/my-app/src/DocumentList.js",["278","279"],[],"import React from \"react\";\nimport \"./stylesSR.css\";\n\nfunction SearchResult({ doc }) {\n\n  const title = doc?.document?.title ?? \"\";\n  const url = doc?.document?.url ?? \"\";\n\n\n  const handleButtonClick = (url) => {\n    // Open URL in a new tab\n    window.open(url, '_blank');\n  };\n\n\n\n  return (\n    <div className=\"search-result\">\n      <div className=\"name\">{title}</div>\n      {/* <div className=\"score\"> */}\n      {/* </div> */}\n\n      {/* <div className=\"matched-words\">\n      {matchedWords.length > 0 && (\n        <div className=\"matched-words-container\">\n          <div className=\"matched-words-title\">Matched Words:</div>\n          <div className=\"matched-words-scroll\">\n            {matchedWords.map((word) => (\n              <div className=\"matched-word\" key={word[\"word\"]}>\n                {word[\"word\"]} {word[\"count\"]}\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>*/}\n      <div>\n        <button\n          onClick={() => {\n            handleButtonClick(url);\n          }}\n          className=\"opendocbutton\"\n        >\n          show\n        </button>\n      </div>\n    </div>\n\n  );\n}\n\n\nfunction Fnames({ fname }) {\n\n  return (\n    <div className=\"search-result\">\n      <div className=\"name\">{fname}</div>\n      {/* <div className=\"score\"> */}\n      {/* </div> */}\n\n      {/* <div className=\"matched-words\">\n      {matchedWords.length > 0 && (\n        <div className=\"matched-words-container\">\n          <div className=\"matched-words-title\">Matched Words:</div>\n          <div className=\"matched-words-scroll\">\n            {matchedWords.map((word) => (\n              <div className=\"matched-word\" key={word[\"word\"]}>\n                {word[\"word\"]} {word[\"count\"]}\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>*/}\n    \n    </div>\n\n  );\n}\n\nexport default function DocumentList({ fileNames, documents, handleCheckboxChange,setshowdocs }) {\n  return (\n    <div className=\"search-results-container\">\n\n      <div class=\"filelistbutdiv\">\n        <button className=\"filelistbut\" onClick={() => { setshowdocs(false) }}>Close</button>\n      </div> \n     \n      {  (fileNames.length==0 && documents.length == 0)  && <div className=\"sciresfilessec\">\n        <div className=\"sciresfiles\">No Files Present</div>\n        {fileNames.map((fname, index) => (\n          <Fnames key={index} fname={fname} />\n        ))}\n      </div>}\n      \n      {documents.length > 0 && <> <div className=\"sciresfilessec\">\n        <div className=\"sciresfiles\">Files From SCIRES</div>\n        {documents.map((doc, index) => (\n          <SearchResult key={index} doc={doc} />\n        ))}\n      </div>\n        <hr /></>}\n\n      {fileNames.length>0 && <div className=\"sciresfilessec\">\n        <div className=\"sciresfiles\">Uploaded Files</div>\n        {fileNames.map((fname, index) => (\n          <Fnames key={index} fname={fname} />\n        ))}\n      </div>}\n    </div>\n  );\n}\n","/home/ashish/docpdf/pdfdoc/research-ranking-app/my-app/src/reducers/index.js",[],[],"/home/ashish/docpdf/pdfdoc/research-ranking-app/my-app/src/AddTerm.js",[],[],"/home/ashish/docpdf/pdfdoc/research-ranking-app/my-app/src/textinput.js",[],[],"/home/ashish/docpdf/pdfdoc/research-ranking-app/my-app/src/fileselector.js",["280"],[],"import React, { useState } from \"react\";\nimport \"./fileselector.css\";\nimport FileUpload from \"./FileUpload\";\n\nconst useColorAssignment = (initialColors) => {\n    const [colors, setColors] = useState(initialColors);\n\n    const assignColor = () => {\n        if (colors.length === 0) return null;\n\n        const randomIndex = Math.floor(Math.random() * colors.length);\n        const color = colors[randomIndex];\n        setColors((prevColors) => prevColors.filter((c, index) => index !== randomIndex));\n\n        return color;\n    };\n\n    return assignColor;\n};\n\n\nfunction FileInput({ fileNames, setIsLoading, setFileText, setFileNames, closefileinput }) {\n\n\n\n    return (\n        // <div className = \"contentfs\">\n        <div className=\"mac-book-pro142-group9fs\">\n            {/* <h4>File Upload</h4> */}\n            {/* <i class=\"fa-solid fa-cloud-arrow-up\"></i> */}\n            <FileUpload setIsLoading={setIsLoading} setFileText={setFileText} closefileinput={closefileinput} setFileNames={setFileNames} />\n\n\n            {/* <div className=\"filenamesview\">\n           \n            {fileNames&& fileNames.length > 0?\n            \n            <div className=\"selectedfiles\">{fileNames.length} files uploaded.</div>\n            \n                        :''}              \n            </div> */}\n\n            {/* <div className=\"mac-book-pro142-donebuttonfs\" onClick={() => closefileinput()}>\n\n                <span className=\"mac-book-pro142-text12fs\">\n                    <span>DONE</span>\n                </span>\n            </div> */}\n\n            <button className=\"mac-book-pro142-donebuttonfs\" onClick={() => closefileinput()}>BACK</button>\n            <div className=\"mac-book-pro142-frame2\"></div>\n        </div>\n        // </div>\n    );\n}\n\nexport default FileInput;\n\n\n","/home/ashish/docpdf/pdfdoc/research-ranking-app/my-app/src/DocRankUI.js",["281","282"],[],"import React, { useState } from \"react\";\nimport \"./DocRankUI.css\";\nimport SearchResults from \"./SearchResults\";\nimport FileUpload from \"./FileUpload\";\n\nconst useColorAssignment = (initialColors) => {\n    const [colors, setColors] = useState(initialColors);\n\n    const assignColor = () => {\n        if (colors.length === 0) return null;\n\n        const randomIndex = Math.floor(Math.random() * colors.length);\n        const color = colors[randomIndex];\n        setColors((prevColors) => prevColors.filter((c, index) => index !== randomIndex));\n\n        return color;\n    };\n\n    return assignColor;\n};\n\n\nfunction DocRankUI({ results,showthispdf }) {\n\n\n\n    return (\n        <div className=\"mac-book-pro142-group9\">\n            \n                <SearchResults results={results} showthispdf={showthispdf} />\n        \n\n            {/* <div className=\"mac-book-pro142-donebutton\" onClick={() => closefileinput()}>\n                <span className=\"mac-book-pro142-text12\">\n                    <span>DONE</span>\n                </span>\n            </div> */}\n            <div className=\"mac-book-pro142-frame2\"></div>\n        </div>\n    );\n}\n\nexport default DocRankUI;\n\n\n",{"ruleId":"283","severity":1,"message":"284","line":10,"column":8,"nodeType":"285","messageId":"286","endLine":10,"endColumn":16},{"ruleId":"283","severity":1,"message":"287","line":14,"column":10,"nodeType":"285","messageId":"286","endLine":14,"endColumn":21},{"ruleId":"283","severity":1,"message":"288","line":23,"column":15,"nodeType":"285","messageId":"286","endLine":23,"endColumn":21},{"ruleId":"283","severity":1,"message":"289","line":24,"column":10,"nodeType":"285","messageId":"286","endLine":24,"endColumn":15},{"ruleId":"283","severity":1,"message":"290","line":25,"column":10,"nodeType":"285","messageId":"286","endLine":25,"endColumn":16},{"ruleId":"283","severity":1,"message":"291","line":26,"column":10,"nodeType":"285","messageId":"286","endLine":26,"endColumn":16},{"ruleId":"283","severity":1,"message":"292","line":27,"column":10,"nodeType":"285","messageId":"286","endLine":27,"endColumn":20},{"ruleId":"283","severity":1,"message":"293","line":27,"column":22,"nodeType":"285","messageId":"286","endLine":27,"endColumn":35},{"ruleId":"283","severity":1,"message":"294","line":28,"column":23,"nodeType":"285","messageId":"286","endLine":28,"endColumn":37},{"ruleId":"283","severity":1,"message":"295","line":29,"column":10,"nodeType":"285","messageId":"286","endLine":29,"endColumn":22},{"ruleId":"283","severity":1,"message":"296","line":29,"column":24,"nodeType":"285","messageId":"286","endLine":29,"endColumn":39},{"ruleId":"283","severity":1,"message":"297","line":30,"column":10,"nodeType":"285","messageId":"286","endLine":30,"endColumn":23},{"ruleId":"283","severity":1,"message":"298","line":31,"column":10,"nodeType":"285","messageId":"286","endLine":31,"endColumn":21},{"ruleId":"283","severity":1,"message":"299","line":31,"column":23,"nodeType":"285","messageId":"286","endLine":31,"endColumn":37},{"ruleId":"283","severity":1,"message":"300","line":32,"column":10,"nodeType":"285","messageId":"286","endLine":32,"endColumn":23},{"ruleId":"283","severity":1,"message":"301","line":32,"column":25,"nodeType":"285","messageId":"286","endLine":32,"endColumn":41},{"ruleId":"283","severity":1,"message":"302","line":37,"column":10,"nodeType":"285","messageId":"286","endLine":37,"endColumn":18},{"ruleId":"283","severity":1,"message":"303","line":37,"column":20,"nodeType":"285","messageId":"286","endLine":37,"endColumn":31},{"ruleId":"283","severity":1,"message":"304","line":39,"column":10,"nodeType":"285","messageId":"286","endLine":39,"endColumn":18},{"ruleId":"283","severity":1,"message":"305","line":39,"column":20,"nodeType":"285","messageId":"286","endLine":39,"endColumn":31},{"ruleId":"283","severity":1,"message":"306","line":44,"column":10,"nodeType":"285","messageId":"286","endLine":44,"endColumn":17},{"ruleId":"283","severity":1,"message":"307","line":44,"column":19,"nodeType":"285","messageId":"286","endLine":44,"endColumn":29},{"ruleId":"283","severity":1,"message":"308","line":97,"column":10,"nodeType":"285","messageId":"286","endLine":97,"endColumn":16},{"ruleId":"283","severity":1,"message":"309","line":98,"column":10,"nodeType":"285","messageId":"286","endLine":98,"endColumn":16},{"ruleId":"283","severity":1,"message":"310","line":116,"column":9,"nodeType":"285","messageId":"286","endLine":116,"endColumn":32},{"ruleId":"283","severity":1,"message":"311","line":228,"column":11,"nodeType":"285","messageId":"286","endLine":228,"endColumn":22},{"ruleId":"283","severity":1,"message":"312","line":249,"column":9,"nodeType":"285","messageId":"286","endLine":249,"endColumn":27},{"ruleId":"283","severity":1,"message":"313","line":275,"column":11,"nodeType":"285","messageId":"286","endLine":275,"endColumn":21},{"ruleId":"314","severity":1,"message":"315","line":361,"column":9,"nodeType":"316","messageId":"317","endLine":401,"endColumn":10},{"ruleId":"318","severity":1,"message":"319","line":441,"column":6,"nodeType":"320","endLine":441,"endColumn":18,"suggestions":"321"},{"ruleId":"283","severity":1,"message":"322","line":443,"column":18,"nodeType":"285","messageId":"286","endLine":443,"endColumn":25},{"ruleId":"283","severity":1,"message":"323","line":477,"column":9,"nodeType":"285","messageId":"286","endLine":477,"endColumn":20},{"ruleId":"283","severity":1,"message":"324","line":538,"column":12,"nodeType":"285","messageId":"286","endLine":538,"endColumn":22},{"ruleId":"283","severity":1,"message":"325","line":580,"column":9,"nodeType":"285","messageId":"286","endLine":580,"endColumn":13},{"ruleId":"318","severity":1,"message":"326","line":604,"column":6,"nodeType":"320","endLine":604,"endColumn":24,"suggestions":"327"},{"ruleId":"283","severity":1,"message":"328","line":609,"column":11,"nodeType":"285","messageId":"286","endLine":609,"endColumn":18},{"ruleId":"283","severity":1,"message":"328","line":680,"column":11,"nodeType":"285","messageId":"286","endLine":680,"endColumn":18},{"ruleId":"283","severity":1,"message":"329","line":774,"column":34,"nodeType":"285","messageId":"286","endLine":774,"endColumn":43},{"ruleId":"330","severity":1,"message":"331","line":832,"column":18,"nodeType":"332","messageId":"333","endLine":832,"endColumn":20},{"ruleId":"330","severity":1,"message":"331","line":855,"column":20,"nodeType":"332","messageId":"333","endLine":855,"endColumn":22},{"ruleId":"283","severity":1,"message":"334","line":4,"column":8,"nodeType":"285","messageId":"286","endLine":4,"endColumn":14},{"ruleId":"283","severity":1,"message":"335","line":32,"column":9,"nodeType":"285","messageId":"286","endLine":32,"endColumn":21},{"ruleId":"283","severity":1,"message":"336","line":38,"column":9,"nodeType":"285","messageId":"286","endLine":38,"endColumn":16},{"ruleId":"283","severity":1,"message":"337","line":42,"column":9,"nodeType":"285","messageId":"286","endLine":42,"endColumn":21},{"ruleId":"283","severity":1,"message":"338","line":1,"column":17,"nodeType":"285","messageId":"286","endLine":1,"endColumn":25},{"ruleId":"318","severity":1,"message":"339","line":7,"column":6,"nodeType":"320","endLine":7,"endColumn":20,"suggestions":"340"},{"ruleId":"283","severity":1,"message":"341","line":4,"column":17,"nodeType":"285","messageId":"286","endLine":4,"endColumn":25},{"ruleId":"314","severity":1,"message":"342","line":148,"column":30,"nodeType":"316","messageId":"317","endLine":154,"endColumn":8},{"ruleId":"283","severity":1,"message":"343","line":268,"column":11,"nodeType":"285","messageId":"286","endLine":268,"endColumn":23},{"ruleId":"283","severity":1,"message":"344","line":1,"column":17,"nodeType":"285","messageId":"286","endLine":1,"endColumn":26},{"ruleId":"283","severity":1,"message":"338","line":1,"column":28,"nodeType":"285","messageId":"286","endLine":1,"endColumn":36},{"ruleId":"283","severity":1,"message":"345","line":3,"column":8,"nodeType":"285","messageId":"286","endLine":3,"endColumn":21},{"ruleId":"283","severity":1,"message":"334","line":4,"column":8,"nodeType":"285","messageId":"286","endLine":4,"endColumn":14},{"ruleId":"283","severity":1,"message":"346","line":5,"column":8,"nodeType":"285","messageId":"286","endLine":5,"endColumn":18},{"ruleId":"283","severity":1,"message":"347","line":8,"column":8,"nodeType":"285","messageId":"286","endLine":8,"endColumn":21},{"ruleId":"283","severity":1,"message":"348","line":9,"column":8,"nodeType":"285","messageId":"286","endLine":9,"endColumn":11},{"ruleId":"283","severity":1,"message":"284","line":10,"column":8,"nodeType":"285","messageId":"286","endLine":10,"endColumn":16},{"ruleId":"283","severity":1,"message":"349","line":13,"column":8,"nodeType":"285","messageId":"286","endLine":13,"endColumn":14},{"ruleId":"283","severity":1,"message":"287","line":15,"column":10,"nodeType":"285","messageId":"286","endLine":15,"endColumn":21},{"ruleId":"283","severity":1,"message":"350","line":17,"column":8,"nodeType":"285","messageId":"286","endLine":17,"endColumn":15},{"ruleId":"283","severity":1,"message":"288","line":29,"column":15,"nodeType":"285","messageId":"286","endLine":29,"endColumn":21},{"ruleId":"283","severity":1,"message":"289","line":30,"column":10,"nodeType":"285","messageId":"286","endLine":30,"endColumn":15},{"ruleId":"283","severity":1,"message":"290","line":31,"column":10,"nodeType":"285","messageId":"286","endLine":31,"endColumn":16},{"ruleId":"283","severity":1,"message":"291","line":32,"column":10,"nodeType":"285","messageId":"286","endLine":32,"endColumn":16},{"ruleId":"283","severity":1,"message":"292","line":33,"column":10,"nodeType":"285","messageId":"286","endLine":33,"endColumn":20},{"ruleId":"283","severity":1,"message":"293","line":33,"column":22,"nodeType":"285","messageId":"286","endLine":33,"endColumn":35},{"ruleId":"283","severity":1,"message":"294","line":34,"column":23,"nodeType":"285","messageId":"286","endLine":34,"endColumn":37},{"ruleId":"283","severity":1,"message":"295","line":35,"column":10,"nodeType":"285","messageId":"286","endLine":35,"endColumn":22},{"ruleId":"283","severity":1,"message":"296","line":35,"column":24,"nodeType":"285","messageId":"286","endLine":35,"endColumn":39},{"ruleId":"283","severity":1,"message":"297","line":36,"column":10,"nodeType":"285","messageId":"286","endLine":36,"endColumn":23},{"ruleId":"283","severity":1,"message":"298","line":37,"column":10,"nodeType":"285","messageId":"286","endLine":37,"endColumn":21},{"ruleId":"283","severity":1,"message":"299","line":37,"column":23,"nodeType":"285","messageId":"286","endLine":37,"endColumn":37},{"ruleId":"283","severity":1,"message":"300","line":38,"column":10,"nodeType":"285","messageId":"286","endLine":38,"endColumn":23},{"ruleId":"283","severity":1,"message":"301","line":38,"column":25,"nodeType":"285","messageId":"286","endLine":38,"endColumn":41},{"ruleId":"283","severity":1,"message":"351","line":41,"column":10,"nodeType":"285","messageId":"286","endLine":41,"endColumn":22},{"ruleId":"283","severity":1,"message":"302","line":43,"column":10,"nodeType":"285","messageId":"286","endLine":43,"endColumn":18},{"ruleId":"283","severity":1,"message":"303","line":43,"column":20,"nodeType":"285","messageId":"286","endLine":43,"endColumn":31},{"ruleId":"283","severity":1,"message":"304","line":45,"column":10,"nodeType":"285","messageId":"286","endLine":45,"endColumn":18},{"ruleId":"283","severity":1,"message":"305","line":45,"column":20,"nodeType":"285","messageId":"286","endLine":45,"endColumn":31},{"ruleId":"283","severity":1,"message":"352","line":49,"column":10,"nodeType":"285","messageId":"286","endLine":49,"endColumn":18},{"ruleId":"283","severity":1,"message":"306","line":50,"column":10,"nodeType":"285","messageId":"286","endLine":50,"endColumn":17},{"ruleId":"283","severity":1,"message":"307","line":50,"column":19,"nodeType":"285","messageId":"286","endLine":50,"endColumn":29},{"ruleId":"283","severity":1,"message":"353","line":181,"column":9,"nodeType":"285","messageId":"286","endLine":181,"endColumn":25},{"ruleId":"283","severity":1,"message":"308","line":235,"column":10,"nodeType":"285","messageId":"286","endLine":235,"endColumn":16},{"ruleId":"283","severity":1,"message":"309","line":236,"column":10,"nodeType":"285","messageId":"286","endLine":236,"endColumn":16},{"ruleId":"283","severity":1,"message":"311","line":367,"column":11,"nodeType":"285","messageId":"286","endLine":367,"endColumn":22},{"ruleId":"283","severity":1,"message":"312","line":388,"column":9,"nodeType":"285","messageId":"286","endLine":388,"endColumn":27},{"ruleId":"283","severity":1,"message":"313","line":414,"column":11,"nodeType":"285","messageId":"286","endLine":414,"endColumn":21},{"ruleId":"314","severity":1,"message":"315","line":500,"column":9,"nodeType":"316","messageId":"317","endLine":540,"endColumn":10},{"ruleId":"318","severity":1,"message":"319","line":580,"column":6,"nodeType":"320","endLine":580,"endColumn":18,"suggestions":"354"},{"ruleId":"283","severity":1,"message":"322","line":582,"column":18,"nodeType":"285","messageId":"286","endLine":582,"endColumn":25},{"ruleId":"283","severity":1,"message":"323","line":616,"column":9,"nodeType":"285","messageId":"286","endLine":616,"endColumn":20},{"ruleId":"283","severity":1,"message":"355","line":667,"column":12,"nodeType":"285","messageId":"286","endLine":667,"endColumn":22},{"ruleId":"283","severity":1,"message":"356","line":680,"column":12,"nodeType":"285","messageId":"286","endLine":680,"endColumn":26},{"ruleId":"283","severity":1,"message":"324","line":685,"column":12,"nodeType":"285","messageId":"286","endLine":685,"endColumn":22},{"ruleId":"283","severity":1,"message":"357","line":697,"column":12,"nodeType":"285","messageId":"286","endLine":697,"endColumn":22},{"ruleId":"283","severity":1,"message":"325","line":727,"column":9,"nodeType":"285","messageId":"286","endLine":727,"endColumn":13},{"ruleId":"318","severity":1,"message":"326","line":751,"column":6,"nodeType":"320","endLine":751,"endColumn":24,"suggestions":"358"},{"ruleId":"283","severity":1,"message":"328","line":756,"column":11,"nodeType":"285","messageId":"286","endLine":756,"endColumn":18},{"ruleId":"283","severity":1,"message":"328","line":827,"column":11,"nodeType":"285","messageId":"286","endLine":827,"endColumn":18},{"ruleId":"283","severity":1,"message":"329","line":921,"column":34,"nodeType":"285","messageId":"286","endLine":921,"endColumn":43},{"ruleId":"330","severity":1,"message":"331","line":979,"column":18,"nodeType":"332","messageId":"333","endLine":979,"endColumn":20},{"ruleId":"330","severity":1,"message":"331","line":1002,"column":20,"nodeType":"332","messageId":"333","endLine":1002,"endColumn":22},{"ruleId":"283","severity":1,"message":"359","line":1012,"column":12,"nodeType":"285","messageId":"286","endLine":1012,"endColumn":21},{"ruleId":"283","severity":1,"message":"334","line":4,"column":8,"nodeType":"285","messageId":"286","endLine":4,"endColumn":14},{"ruleId":"283","severity":1,"message":"360","line":15,"column":10,"nodeType":"285","messageId":"286","endLine":15,"endColumn":19},{"ruleId":"283","severity":1,"message":"361","line":15,"column":21,"nodeType":"285","messageId":"286","endLine":15,"endColumn":33},{"ruleId":"283","severity":1,"message":"362","line":16,"column":9,"nodeType":"285","messageId":"286","endLine":16,"endColumn":21},{"ruleId":"318","severity":1,"message":"363","line":46,"column":6,"nodeType":"320","endLine":46,"endColumn":8,"suggestions":"364"},{"ruleId":"283","severity":1,"message":"335","line":68,"column":9,"nodeType":"285","messageId":"286","endLine":68,"endColumn":21},{"ruleId":"283","severity":1,"message":"336","line":74,"column":9,"nodeType":"285","messageId":"286","endLine":74,"endColumn":16},{"ruleId":"283","severity":1,"message":"337","line":78,"column":9,"nodeType":"285","messageId":"286","endLine":78,"endColumn":21},{"ruleId":"318","severity":1,"message":"339","line":7,"column":6,"nodeType":"320","endLine":7,"endColumn":20,"suggestions":"365"},{"ruleId":"318","severity":1,"message":"366","line":35,"column":5,"nodeType":"320","endLine":35,"endColumn":18,"suggestions":"367"},{"ruleId":"283","severity":1,"message":"341","line":4,"column":17,"nodeType":"285","messageId":"286","endLine":4,"endColumn":25},{"ruleId":"314","severity":1,"message":"342","line":86,"column":30,"nodeType":"316","messageId":"317","endLine":92,"endColumn":8},{"ruleId":"283","severity":1,"message":"343","line":130,"column":11,"nodeType":"285","messageId":"286","endLine":130,"endColumn":23},{"ruleId":"283","severity":1,"message":"368","line":157,"column":28,"nodeType":"285","messageId":"286","endLine":157,"endColumn":33},{"ruleId":"283","severity":1,"message":"369","line":158,"column":11,"nodeType":"285","messageId":"286","endLine":158,"endColumn":19},{"ruleId":"330","severity":1,"message":"370","line":89,"column":27,"nodeType":"332","messageId":"333","endLine":89,"endColumn":29},{"ruleId":"330","severity":1,"message":"370","line":89,"column":51,"nodeType":"332","messageId":"333","endLine":89,"endColumn":53},{"ruleId":"283","severity":1,"message":"371","line":5,"column":7,"nodeType":"285","messageId":"286","endLine":5,"endColumn":25},{"ruleId":"283","severity":1,"message":"346","line":4,"column":8,"nodeType":"285","messageId":"286","endLine":4,"endColumn":18},{"ruleId":"283","severity":1,"message":"371","line":6,"column":7,"nodeType":"285","messageId":"286","endLine":6,"endColumn":25},"no-unused-vars","'pdfjsLib' is defined but never used.","Identifier","unusedVar","'useLocation' is defined but never used.","'setPdf' is assigned a value but never used.","'width' is assigned a value but never used.","'images' is assigned a value but never used.","'height' is assigned a value but never used.","'totalPages' is assigned a value but never used.","'setTotalPages' is assigned a value but never used.","'setCurrentPage' is assigned a value but never used.","'pdfRendering' is assigned a value but never used.","'setPdfRendering' is assigned a value but never used.","'pageRendering' is assigned a value but never used.","'searchQuery' is assigned a value but never used.","'setSearchQuery' is assigned a value but never used.","'searchResults' is assigned a value but never used.","'setSearchResults' is assigned a value but never used.","'currhtml' is assigned a value but never used.","'setcurrhtml' is assigned a value but never used.","'fileData' is assigned a value but never used.","'setFileData' is assigned a value but never used.","'pdfUrls' is assigned a value but never used.","'setPdfUrls' is assigned a value but never used.","'param1' is assigned a value but never used.","'param2' is assigned a value but never used.","'openReactAppInNewWindow' is assigned a value but never used.","'pdfUrlParam' is assigned a value but never used.","'downloadPdfFromUrl' is assigned a value but never used.","'falseTerms' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'htmltemp', 'htmltemp', 'htmltemp', 'htmltemp', 'htmltemp', 'htmltemp', 'htmltemp'.","ArrowFunctionExpression","unsafeRefs","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'updateTermObject'. Either include it or remove the dependency array.","ArrayExpression",["372"],"'showPdf' is defined but never used.","'pdfFilePath' is assigned a value but never used.","'rerankbm25' is defined but never used.","'canv' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'renderPage'. Either include it or remove the dependency array.",["373"],"'wordSet' is assigned a value but never used.","'wordCount' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'Button' is defined but never used.","'goToPrevPage' is assigned a value but never used.","'viewPdf' is assigned a value but never used.","'goToNextPage' is assigned a value but never used.","'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'onCheckedTerms'. Either include it or remove the dependency array. If 'onCheckedTerms' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["374"],"'Document' is defined but never used.","Function declared in a loop contains unsafe references to variable(s) 'text'.","'currentChunk' is assigned a value but never used.","'useEffect' is defined but never used.","'htmlpdfviewer' is defined but never used.","'FileUpload' is defined but never used.","'SearchResults' is defined but never used.","'Box' is defined but never used.","'styles' is defined but never used.","'AddTerm' is defined but never used.","'alldocsready' is assigned a value but never used.","'showpage' is assigned a value but never used.","'movetorankscreen' is assigned a value but never used.",["375"],"'rerankjacc' is defined but never used.","'setshowingdocs' is defined but never used.","'rerankcoss' is defined but never used.",["376"],"'showranks' is defined but never used.","'htmlWidth' is assigned a value but never used.","'setHtmlWidth' is assigned a value but never used.","'hiddenDivRef' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'html' and 'scale'. Either include them or remove the dependency array. You can also do a functional update 'setScale(s => ...)' if you only need 'scale' in the 'setScale' call.",["377"],["378"],"React Hook useEffect has a missing dependency: 'results'. Either include it or remove the dependency array.",["379"],"'error' is assigned a value but never used.","'progress' is assigned a value but never used.","Expected '===' and instead saw '=='.","'useColorAssignment' is assigned a value but never used.",{"desc":"380","fix":"381"},{"desc":"382","fix":"383"},{"desc":"384","fix":"385"},{"desc":"380","fix":"386"},{"desc":"382","fix":"387"},{"desc":"388","fix":"389"},{"desc":"384","fix":"390"},{"desc":"391","fix":"392"},"Update the dependencies array to be: [queryterms, updateTermObject]",{"range":"393","text":"394"},"Update the dependencies array to be: [pdf, currentPage, renderPage]",{"range":"395","text":"396"},"Update the dependencies array to be: [checkedTerms, onCheckedTerms]",{"range":"397","text":"398"},{"range":"399","text":"394"},{"range":"400","text":"396"},"Update the dependencies array to be: [html, scale]",{"range":"401","text":"402"},{"range":"403","text":"398"},"Update the dependencies array to be: [currShowing, results]",{"range":"404","text":"405"},[14069,14081],"[queryterms, updateTermObject]",[18607,18625],"[pdf, currentPage, renderPage]",[205,219],"[checkedTerms, onCheckedTerms]",[17428,17440],[22126,22144],[1696,1698],"[html, scale]",[226,240],[789,802],"[currShowing, results]"]